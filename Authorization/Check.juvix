module Authorization.Check;

import Stdlib.Prelude open;

import Anoma.Identity.External open;
import Anoma.Identity.Signing.Types open;
import Authorization.Message open;
import Anoma.Resource as Resource open;
import Anoma.Transaction open;
import Anoma.Proving.Types open;

import AnomaHelpers open;

isAuthorizedBy
  (signer : ExternalIdentity) (origin : Logic.Tag) (publicInputs : Logic.Instance) : Bool :=
  case
    lookupAppData@{
      key := origin;
      Value := Pair ResourceRelationship Signature;
      appData := Logic.Instance.appData publicInputs
    }
  of
    | nothing := false
    | just (msg, sig) :=
      ResourceRelationship.origin msg == origin
        && verify sig msg signer
        && Set.isSubset
          (ResourceRelationship.mustBeConsumed msg)
          (Logic.Instance.nullifiers publicInputs)
        && Set.isSubset
          (ResourceRelationship.mustBeCreated msg)
          (Logic.Instance.commitments publicInputs);
