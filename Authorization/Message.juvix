module Authorization.Message;

import Stdlib.Prelude open;
import Data.Map open;
import Data.Set open;
import Anoma open;
import AnomaHelpers open;

-- TODO: Use nullifier once v2 specs are implemented.
type LinkedCommitmentMessage :=
  mkLinkedCommitmentMessage {
    consumed : Helper.Commitment;
    created : Helper.Commitment
  };

type LinkedCommitmentSetMessage :=
  mkLinkedCommitmentSetMessage {
    consumed : Helper.Commitment;
    createdSet : Set Helper.Commitment
  };

--- Use nullifier as the lookup key.
type LinkedCommitmentSetMessage' :=
  mkLinkedResourceSetMessage' {
    consumed : Helper.Nullifier;
    createdSet : Set Helper.Commitment
  };

-- TODO make signing optional
mkLinkedCommitmentExtraDataMapEntry
  (self : PrivateKey)
  (created : Resource)
  (consumed : Resource)
  : Pair Bytes32 Bytes :=
  let
    consumedCm : Helper.Commitment := commitment consumed;
    createdCm : Helper.Commitment := commitment created;
    msg : LinkedCommitmentMessage :=
      mkLinkedCommitmentMessage@{
        consumed := consumedCm;
        created := createdCm
      };

    k : Bytes32 := natToBytes32 consumedCm;
    v : Bytes :=
      natToBytes
        (anomaEncode (msg, anomaSignDetached msg self));
  in k, v;

-- TODO make signing optional
mkLinkedCommitmentSetExtraDataMapEntry
  (self : PrivateKey)
  (created : List Resource)
  (consumed : Resource)
  : Pair Bytes32 Bytes :=
  let
    consumedCm : Helper.Commitment := commitment consumed;
    createdCms : Set Helper.Commitment :=
      Data.Set.fromList (map commitment created);
    msg : LinkedCommitmentSetMessage :=
      mkLinkedCommitmentSetMessage@{
        consumed := consumedCm;
        createdSet := createdCms
      };

    k : Bytes32 := natToBytes32 consumedCm;
    v : Bytes :=
      natToBytes
        (anomaEncode (msg, anomaSignDetached msg self));
  in k, v;

mkLinkedCommitmentExtraData
  (self : PrivateKey)
  (consumed : List Resource)
  (created : Resource)
  : Map Bytes32 Bytes :=
  Data.Map.fromList
    (map
      (mkLinkedCommitmentExtraDataMapEntry self created)
      consumed);

mkLinkedCommitmentSetExtraData
  (self : PrivateKey)
  (consumed : List Resource)
  (created : List Resource)
  : Map Bytes32 Bytes :=
  Data.Map.fromList
    (map
      (mkLinkedCommitmentSetExtraDataMapEntry self created)
      consumed);
