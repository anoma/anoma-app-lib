module Authorization.Message;

import Stdlib.Prelude open;
import Data.Map as Map open using {Map};
import Data.Set as Set open using {Set};
import Anoma open;
import AnomaHelpers open;

-- TODO use Nullifier once we comply with v2 specs
type ResourceRelationship :=
  mkResourceRelationship {
    origin : Commitment;
    mustBeCreated : Set Commitment;
    mustBeConsumed : Set Nullifier
  };

-- TODO make signing optional
mkResourceRelationshipExtraDataMapEntry
  (nullifierKey : PrivateKey)
  (mustBeConsumed : List Resource)
  (mustBeCreated : List Resource)
  (origin : Resource)
  : Pair Bytes32 Bytes :=
  let
    originCm : Commitment := commitment origin;
    consumedNfs : Set Nullifier :=
      Set.fromList (map \ {r := nullifier r nullifierKey} mustBeConsumed);
    createdCms : Set Commitment := Set.fromList (map commitment mustBeCreated);
    msg : ResourceRelationship :=
      mkResourceRelationship@{
        origin := originCm;
        mustBeConsumed := consumedNfs;
        mustBeCreated := createdCms
      };
    k : Bytes32 := natToBytes32 (anomaEncode originCm);
    v : Bytes := natToBytes (anomaEncode (msg, anomaSignDetached msg nullifierKey));
  in k, v;

mkResourceRelationshipExtraData
  (nullifierKey : PrivateKey)
  (origins : List Resource)
  (mustBeConsumed : List Resource)
  (mustBeCreated : List Resource)
  : Map Bytes32 Bytes :=
  Map.fromList
    (map
      (mkResourceRelationshipExtraDataMapEntry nullifierKey mustBeConsumed mustBeCreated)
      origins);

mkTxWithExtraData
  (nk : PrivateKey) (consumed : List Resource) (created : List Resource) : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := map commitment created;
    nullifiers := map (r in consumed) nullifier r nk;
    proofs := consumed ++ created;
    complianceProofs := [];
    delta := [];
    extra :=
      anomaEncode
        mkResourceRelationshipExtraData@{
          nullifierKey := nk;
          origins := consumed;
          mustBeConsumed := [];
          mustBeCreated := created
        };
    preference := 0
  };
