module Authorization.Message;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Stdlib.Data.Set as Set open using {Set; empty; size; insert; union};
import AnomaHelpers open;
import Authorization.Identities open;

import Anoma.Resource as Resource open;
import Anoma.Transaction as Transaction open;
import Anoma.Builtin.System open;
import Anoma.Transaction.AppData open;
import Anoma.Identity open;

-- TODO improve proving imports
import Anoma.Proving.Types open;
import Anoma.Proving.DeltaProof as DeltaProof open;
import Anoma.Proving.ComplianceProof as ComplianceProof open;
import Anoma.Proving.LogicProof as LogicProof open;
import Anoma.Proving.ProofRecord as GenericProofRecord open;
import Anoma.Utils open;

--- A message format specifiying resources that must be created and consumed within an ;Action;.
--- @param origin The resource performing the check.
--- @mustBeCreated origin The resource performing the check.
--- @mustBeConsumed origin The resource performing the check.
type ResourceRelationship :=
  mkResourceRelationship@{
    -- TODO use tag
    origin : Commitment;
    mustBeCreated : Set Commitment;
    mustBeConsumed : Set Nullifier
  };

mkResourceRelationshipAppDataMapEntry
  -- TODO use Witness here
  (identity : Identity)
  (origin : Resource)
  (mustBeConsumed : Set Resource)
  (mustBeCreated : Set Resource)
  : AppDataEntry :=
  let
    originCm : Resource.Commitment := commitment origin;
    consumedNfs : Set Resource.Nullifier :=
      Set.fromList (map \ {r := nullifier (toNullifierKey identity) r} (Set.toList mustBeConsumed));
    createdCms : Set Resource.Commitment :=
      Set.fromList (map commitment (Set.toList mustBeCreated));
    msg : ResourceRelationship :=
      mkResourceRelationship@{
        origin := originCm;
        mustBeConsumed := consumedNfs;
        mustBeCreated := createdCms
      };
    sig : Signature := sign msg (Identity.internal identity);
  in mkAppDataEntry@{
    key := anomaEncode originCm |> mkAppDataKey;
    value := anomaEncode (msg, sig) |> mkAppDataValue
  };

mkResourceRelationshipAppData
  (identity : Identity)
  (origins : Set Resource)
  (mustBeConsumed : Set Resource)
  (mustBeCreated : Set Resource)
  : AppData :=
  for (acc := Set.empty) (origin in origins)
    {Set.insert
      mkResourceRelationshipAppDataMapEntry@{
        identity;
        origin;
        mustBeConsumed;
        mustBeCreated
      }
      acc};

module FromConvertable;
  import Resource.Traits.Convertable open;
  import Transaction.Traits open;

  --- Creates an app data map entry for every consumed ;Convertable; ;Resource; of type `R1` with a ;ResourceRelationship; message and signature being stored at the consumed resources commitment  message. This message must be signed by the respective owner of the consumed resources and requires  all created ;Convertable; ;Resource; of type `R2` to be present in the ;Commitment; ;Set; of the transaction.
  actionWithAuthorizationAppData
    {R1 R2} {{Convertable R1}} {{Convertable R2}} : ActionConvertable R1 R2 :=
    mkActionConvertable@{
      toAction
        (standardInputs : StandardInputs)
        (consumedResources : Set R1)
        (createdResources : Set R2)
        : Action :=
        let
          identity := StandardInputs.identity standardInputs;
          consumed := Set.fromList (map Convertable.toResource (Set.toList consumedResources));
          -- consumed := listFor (acc := Set.empty) (r in consumedResources) {Set.insert (Convertable.toResource r acc};
          created := Set.fromList (map Convertable.toResource (Set.toList createdResources));
          -- created := listfor (acc := Set.empty) (r in createdResources) {Set.insert (Convertable.toResource r) acc};
          -- TODO Make this callable from the TX function per resource.
          appData :=
            mkResourceRelationshipAppData@{
              identity;
              origins := consumed;
              mustBeConsumed := Set.empty;
              -- TODO Add `consumed` here too?
              mustBeCreated := created
            };
          customInputs :=
            resourceMapping@{
              identity;
              consumed;
              created
            };
        in mkActionHelper@{
          identity;
          consumed;
          created;
          appData;
          customInputs
        }
    };
end;
