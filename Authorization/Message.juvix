module Authorization.Message;

import Stdlib.Prelude open;
import Data.Map open;
import Data.Set open;
import Anoma open;
import AnomaHelpers open;

type ResourceRelationship :=
  mkResourceRelationship {
    origin : Helper.Commitment;
    -- TODO use Helper.Nullifier once we comply with v2 specs
    mustBeCreated : Set Helper.Commitment;
    mustBeConsumed : Set Helper.Commitment
  };

-- TODO make signing optional
mkResourceRelationshipExtraDataMapEntry
  (nullifierKey : PrivateKey)
  (mustBeConsumed : List Resource)
  (mustBeCreated : List Resource)
  (origin : Resource)
  : Pair Bytes32 Bytes :=
  let
    originCm : Helper.Commitment := commitment origin;
    consumedNfs : Set Helper.Nullifier :=
      Data.Set.fromList
        (map \ {r := nullifier r nullifierKey} mustBeConsumed);
    createdCms : Set Helper.Commitment :=
      Data.Set.fromList (map commitment mustBeCreated);
    msg : ResourceRelationship :=
      mkResourceRelationship@{
        origin := originCm;
        mustBeConsumed := consumedNfs;
        mustBeCreated := createdCms
      };

    k : Bytes32 := natToBytes32 originCm;
    v : Bytes :=
      natToBytes
        (anomaEncode (msg, anomaSignDetached msg nullifierKey));
  in k, v;

mkResourceRelationshipExtraData
  (nullifierKey : PrivateKey)
  (origins : List Resource)
  (mustBeConsumed : List Resource)
  (mustBeCreated : List Resource)
  : Map Bytes32 Bytes :=
  Data.Map.fromList
    (map
      (mkResourceRelationshipExtraDataMapEntry
        nullifierKey
        mustBeConsumed
        mustBeCreated)
      origins);
