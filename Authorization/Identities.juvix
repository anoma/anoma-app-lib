module Authorization.Identities;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};

import Anoma.Resource open;
import Anoma.Identity.Object open;
import Anoma.Identity.External open;
import Anoma.Identity.Internal open;
import Anoma.Builtin.ByteArray as ByteArray open;
import Anoma.Utils open;

salt (salt : String) (secret : ByteArray) : ByteArray :=
  let
    saltAsNat : Nat := stringToNat salt;
    secretAsNat : Nat := ByteArray.toAnomaContents secret;
  in ByteArray.fromAnomaContents (ByteArray.length secret) (saltAsNat + secretAsNat);

sha256 (value : ByteArray) : ByteArray := STILL_MISSING_JUVIX_IMPLEMENTATION;

toNullifierKey (identity : Identity) : NullifierKey :=
  identity
    |> Identity.internal
    |> InternalIdentity.unInternalIdentity
    |> salt "NullifierKey"
    |> mkNullifierKey;

toNullifierKeyCommitment (identity : Identity) : NullifierKeyCommitment :=
  identity |> toNullifierKey |> NullifierKey.unNullifierKey |> sha256 |> mkNullifierKeyCommitment;

--- The ;Identity; generated from the seed `0x0000000000000000000000000000000000000000000000000000000000000000`
--- (see, e.g., https://cyphr.me/ed25519_tool/ed.html) in little-endian byte order.
module Universal;
  identity : Identity :=
    let
      pubKeyBytes :=
        [ 0x3b
        ; 0x6a
        ; 0x27
        ; 0xbc
        ; 0xce
        ; 0xb6
        ; 0xa4
        ; 0x2d
        ; 0x62
        ; 0xa3
        ; 0xa8
        ; 0xd0
        ; 0x2a
        ; 0x6f
        ; 0xd
        ; 0x73
        ; 0x65
        ; 0x32
        ; 0x15
        ; 0x77
        ; 0x1d
        ; 0xe2
        ; 0x43
        ; 0xa6
        ; 0x3a
        ; 0xc0
        ; 0x48
        ; 0xa1
        ; 0x8b
        ; 0x59
        ; 0xda
        ; 0x29
        ];
    in mkIdentity@{
      external := mkExternalIdentity (mkByteArray pubKeyBytes);
      internal := mkInternalIdentity (mkByteArray (replicate 32 0x0 ++ pubKeyBytes))
    };

  externalIdentity : ExternalIdentity := Identity.external identity;

  internalIdentity : InternalIdentity := Identity.internal identity;

  nullifierKey : NullifierKey :=
    internalIdentity |> InternalIdentity.unInternalIdentity |> mkNullifierKey;

  nullifierKeyCommitment : NullifierKeyCommitment :=
    externalIdentity |> ExternalIdentity.unExternalIdentity |> mkNullifierKeyCommitment;
end;

module Alice;
  identity : Identity :=
    let
      pubKeyBytes :=
        [ 0x4c
        ; 0xb5
        ; 0xab
        ; 0xf6
        ; 0xad
        ; 0x79
        ; 0xfb
        ; 0xf5
        ; 0xab
        ; 0xbc
        ; 0xca
        ; 0xfc
        ; 0xc2
        ; 0x69
        ; 0xd8
        ; 0x5c
        ; 0xd2
        ; 0x65
        ; 0x1e
        ; 0xd4
        ; 0xb8
        ; 0x85
        ; 0xb5
        ; 0x86
        ; 0x9f
        ; 0x24
        ; 0x1a
        ; 0xed
        ; 0xf0
        ; 0xa5
        ; 0xba
        ; 0x29
        ];
    in mkIdentity@{
      external := mkExternalIdentity (mkByteArray pubKeyBytes);
      internal := mkInternalIdentity (mkByteArray (replicate 31 0x0 ++ [0x1] ++ pubKeyBytes))
    };

  externalIdentity : ExternalIdentity := Identity.external identity;

  internalIdentity : InternalIdentity := Identity.internal identity;
end;

module Bob;
  identity : Identity :=
    let
      pubKeyBytes :=
        [ 0x74
        ; 0x22
        ; 0xb9
        ; 0x88
        ; 0x75
        ; 0x98
        ; 0x6
        ; 0x8e
        ; 0x32
        ; 0xc4
        ; 0x44
        ; 0x8a
        ; 0x94
        ; 0x9a
        ; 0xdb
        ; 0x29
        ; 0xd
        ; 0xf
        ; 0x4e
        ; 0x35
        ; 0xb9
        ; 0xe0
        ; 0x1b
        ; 0xe
        ; 0xe5
        ; 0xf1
        ; 0xa1
        ; 0xe6
        ; 0x0
        ; 0xfe
        ; 0x26
        ; 0x74
        ];
    in mkIdentity@{
      external := mkExternalIdentity (mkByteArray pubKeyBytes);
      internal := mkInternalIdentity (mkByteArray (replicate 31 0x0 ++ [0x2] ++ pubKeyBytes))
    };

  externalIdentity : ExternalIdentity := Identity.external identity;

  internalIdentity : InternalIdentity := Identity.internal identity;
end;

module Carol;
  identity : Identity :=
    let
      pubKeyBytes :=
        [ 0xf3
        ; 0x81
        ; 0x62
        ; 0x6e
        ; 0x41
        ; 0xe7
        ; 0x2
        ; 0x7e
        ; 0xa4
        ; 0x31
        ; 0xbf
        ; 0xe3
        ; 0x0
        ; 0x9e
        ; 0x94
        ; 0xbd
        ; 0xd2
        ; 0x5a
        ; 0x74
        ; 0x6b
        ; 0xee
        ; 0xc4
        ; 0x68
        ; 0x94
        ; 0x8d
        ; 0x6c
        ; 0x3c
        ; 0x7c
        ; 0x5d
        ; 0xc9
        ; 0xa5
        ; 0x4b
        ];
    in mkIdentity@{
      external := mkExternalIdentity (mkByteArray pubKeyBytes);
      internal := mkInternalIdentity (mkByteArray (replicate 31 0x0 ++ [0x3] ++ pubKeyBytes))
    };

  externalIdentity : ExternalIdentity := Identity.external identity;

  internalIdentity : InternalIdentity := Identity.internal identity;
end;

--- The zero ;ExternalIdentity; `0x0000000000000000000000000000000000000000000000000000000000000000`
--- for which the ;InternalIdentity; is not known.
module Zero;
  externalIdentity : ExternalIdentity := mkExternalIdentity (mkByteArray (replicate 32 0x0));
end;

module ExternalIdentity;
  toNullifierKeyCommitment (externalIdentity : ExternalIdentity) : NullifierKeyCommitment :=
    externalIdentity |> ExternalIdentity.unExternalIdentity |> mkNullifierKeyCommitment;
end;

module InternalIdentity;
  toNullifierKey (internalIdentity : InternalIdentity) : NullifierKey :=
    internalIdentity |> InternalIdentity.unInternalIdentity |> mkNullifierKey;
end;
