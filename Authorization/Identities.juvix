module Authorization.Identities;

import Stdlib.Prelude open;
import Anoma open;

--- The ;KeyPair; generated from the seed `0x0000000000000000000000000000000000000000000000000000000000000000`
--- (see, e.g., https://cyphr.me/ed25519_tool/ed.html) in little-endian byte order.
module Universal;
  keyPair : KeyPair :=
    let
      pubKeyBytes :=
        [ 0x3b
        ; 0x6a
        ; 0x27
        ; 0xbc
        ; 0xce
        ; 0xb6
        ; 0xa4
        ; 0x2d
        ; 0x62
        ; 0xa3
        ; 0xa8
        ; 0xd0
        ; 0x2a
        ; 0x6f
        ; 0xd
        ; 0x73
        ; 0x65
        ; 0x32
        ; 0x15
        ; 0x77
        ; 0x1d
        ; 0xe2
        ; 0x43
        ; 0xa6
        ; 0x3a
        ; 0xc0
        ; 0x48
        ; 0xa1
        ; 0x8b
        ; 0x59
        ; 0xda
        ; 0x29
        ];
    in KeyPair.mk@{
      pubKey := PublicKey.mk pubKeyBytes;
      privKey := PrivateKey.mk (replicate 32 0x0 ++ pubKeyBytes)
    };

  pubKey : PublicKey := KeyPair.pubKey keyPair;

  privKey : PrivateKey := KeyPair.privKey keyPair;
end;

module Alice;
  keyPair : KeyPair :=
    let
      pubKeyBytes :=
        [ 0x4c
        ; 0xb5
        ; 0xab
        ; 0xf6
        ; 0xad
        ; 0x79
        ; 0xfb
        ; 0xf5
        ; 0xab
        ; 0xbc
        ; 0xca
        ; 0xfc
        ; 0xc2
        ; 0x69
        ; 0xd8
        ; 0x5c
        ; 0xd2
        ; 0x65
        ; 0x1e
        ; 0xd4
        ; 0xb8
        ; 0x85
        ; 0xb5
        ; 0x86
        ; 0x9f
        ; 0x24
        ; 0x1a
        ; 0xed
        ; 0xf0
        ; 0xa5
        ; 0xba
        ; 0x29
        ];
    in KeyPair.mk@{
      pubKey := PublicKey.mk pubKeyBytes;
      privKey := PrivateKey.mk (replicate 31 0x0 ++ [0x1] ++ pubKeyBytes)
    };

  pubKey : PublicKey := KeyPair.pubKey keyPair;

  privKey : PrivateKey := KeyPair.privKey keyPair;
end;

module Bob;
  keyPair : KeyPair :=
    let
      pubKeyBytes :=
        [ 0x74
        ; 0x22
        ; 0xb9
        ; 0x88
        ; 0x75
        ; 0x98
        ; 0x6
        ; 0x8e
        ; 0x32
        ; 0xc4
        ; 0x44
        ; 0x8a
        ; 0x94
        ; 0x9a
        ; 0xdb
        ; 0x29
        ; 0xd
        ; 0xf
        ; 0x4e
        ; 0x35
        ; 0xb9
        ; 0xe0
        ; 0x1b
        ; 0xe
        ; 0xe5
        ; 0xf1
        ; 0xa1
        ; 0xe6
        ; 0x0
        ; 0xfe
        ; 0x26
        ; 0x74
        ];
    in KeyPair.mk@{
      pubKey := PublicKey.mk pubKeyBytes;
      privKey := PrivateKey.mk (replicate 31 0x0 ++ [0x2] ++ pubKeyBytes)
    };

  pubKey : PublicKey := KeyPair.pubKey keyPair;

  privKey : PrivateKey := KeyPair.privKey keyPair;
end;

module Carol;
  keyPair : KeyPair :=
    let
      pubKeyBytes :=
        [ 0xf3
        ; 0x81
        ; 0x62
        ; 0x6e
        ; 0x41
        ; 0xe7
        ; 0x2
        ; 0x7e
        ; 0xa4
        ; 0x31
        ; 0xbf
        ; 0xe3
        ; 0x0
        ; 0x9e
        ; 0x94
        ; 0xbd
        ; 0xd2
        ; 0x5a
        ; 0x74
        ; 0x6b
        ; 0xee
        ; 0xc4
        ; 0x68
        ; 0x94
        ; 0x8d
        ; 0x6c
        ; 0x3c
        ; 0x7c
        ; 0x5d
        ; 0xc9
        ; 0xa5
        ; 0x4b
        ];
    in KeyPair.mk@{
      pubKey := PublicKey.mk pubKeyBytes;
      privKey := PrivateKey.mk (replicate 31 0x0 ++ [0x3] ++ pubKeyBytes)
    };

  pubKey : PublicKey := KeyPair.pubKey keyPair;

  privKey : PrivateKey := KeyPair.privKey keyPair;
end;

--- The zero ;PublicKey; `0x0000000000000000000000000000000000000000000000000000000000000000`
--- for which the ;PrivateKey; is not known.
module Zero;
  pubKey : PublicKey := PublicKey.mk (replicate 32 0x0);
end;
