module Authorization.Owner;

import Stdlib.Prelude open;
import Data.Set open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Message open;

type Owner := mkOwner {owner : PublicKey};

instance
Owner-Eq : Eq Owner :=
  mkEq@{
    eq (d1 d2 : Owner) : Bool :=
      Owner.owner d1 == Owner.owner d2
  };

getOwner (r : Resource) : PublicKey :=
  Owner.owner (anomaDecode (Resource.data r));

type UnauthorizedError :=
  mkUnauthorizedError {
    expected : PublicKey;
    actual : PublicKey
  };

instance
UnauthorizedError-Show : Show UnauthorizedError :=
  mkShow
    \ {e :=
      "UnauthorizedError:\n{"
        ++str "expected : "
        ++str (e |> UnauthorizedError.expected |> Show.show)
        ++str ", "
        ++str "actual"
        ++str (e |> UnauthorizedError.actual |> Show.show)
        ++str "}"};

isAuthorizedByOwner
  (self : Resource) (tx : Transaction) : Bool :=
  let
    selfCm : Helper.Commitment := commitment self;
    lookupResult
      : Maybe (Pair ResourceRelationship Signature) :=
      lookupExtraData (natToBytes32 selfCm) tx;
  in case lookupResult of
       | nothing := false
       | just (msg, sig) :=
         ResourceRelationship.origin msg == selfCm
           && anomaVerifyDetached sig msg (getOwner self)
           && isSubset
             (ResourceRelationship.mustBeConsumed msg)
             (nullifierSet tx)
           && isSubset
             (ResourceRelationship.mustBeCreated msg)
             (commitmentSet tx);
