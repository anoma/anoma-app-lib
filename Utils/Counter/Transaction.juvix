module Utils.Counter.Transaction;

import Stdlib.Prelude open;
import Data.Map as Map open using {Map};
import Anoma open;
import AnomaHelpers open;

import Authorization.Message open;
import Authorization.Identities open;
import Utils.Dummy.Resource open;
import Utils.Counter.Label open;
import Utils.Counter.Error open;
import Utils.Counter.Resource open;

--- Requires a consumable `Utils.Dummy.Resource`.
createCounter (self : KeyPair) (consumableDummy : Resource) : Result CounterError Transaction :=
  let
    ephDummy : Resource :=
      mkDummy@{
        npk := KeyPair.pubKey self;
        eph := true
      };
  in if
    | anomaKind consumableDummy /= anomaKind ephDummy :=
      throw 
        mkError@{
          msg := "The oked consumable resource has the wrong kind."
        }
    | else :=
      let
        myself : PublicKey := KeyPair.pubKey self;
        mySecret : PrivateKey := KeyPair.privKey self;
        ephCounter : Resource :=
          mkCounter@{
            npk := myself;
            eph := true;
            uniqueLabel := mkLabel (nullifier consumableDummy mySecret);
            count := 0
          };
        newCounter :=
          mkCounter@{
            npk := Universal.pubKey;
            eph := false;
            uniqueLabel := mkLabel (nullifier consumableDummy mySecret);
            count := 0
          };
      in ok (mkTransaction mySecret [consumableDummy; ephCounter] [ephDummy; newCounter] Map.empty);

incrementCounter (currentCounter : Resource) : Transaction :=
  let
    updatedCounter : Resource :=
      mkCounter@{
        npk := Universal.pubKey;
        eph := false;
        uniqueLabel := getLabel currentCounter;
        count := Resource.data currentCounter + 1
      };
    extra :=
      Map.fromList
        [ mkResourceRelationshipExtraDataMapEntry@{
          nullifierKey := Universal.privKey;
          origin := currentCounter;
          mustBeConsumed := [];
          mustBeCreated := [updatedCounter]
        }
        ];
  in mkTransaction Universal.privKey [currentCounter] [updatedCounter] extra;
