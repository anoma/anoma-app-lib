module Utils.Counter.Transaction;

import Stdlib.Prelude open;
import Data.Map open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Message open;
import Authorization.Identities open;
import Utils.Dummy.Resource open;
import Utils.Counter.Label open;
import Utils.Counter.Error open;
import Utils.Counter.Resource open;

--- Requires a consumable `Utils.Dummy.Resource`.
createCounter
  (self : KeyPair)
  (consumableDummy : Resource)
  : Either CounterError Transaction :=
  let
    ephDummy : Resource :=
      mkDummy@{
        _npk := KeyPair.pubKey self;
        _eph := true
      };
  in if
    | anomaKind consumableDummy /= anomaKind ephDummy :=
      throw
        mkError@{
          msg :=
            "The passed consumable resource has the wrong kind."
        }
    | else :=
      let
        myself : PublicKey := KeyPair.pubKey self;
        mySecret : PrivateKey := KeyPair.privKey self;
        ephCounter : Resource :=
          mkCounter@{
            nullifierPubKey := myself;
            ephemeral := true;
            uniqueLabel := mkLabel (nullifier consumableDummy mySecret);
            count := 0
          };
        newCounter :=
          mkCounter@{
            nullifierPubKey := universalPubKey;
            ephemeral := false;
            uniqueLabel := mkLabel (nullifier consumableDummy mySecret);
            count := 0
          };
      in pass
        (mkTransaction
          mySecret
          (consumableDummy :: ephCounter :: nil)
          (ephDummy :: newCounter :: nil)
          empty);

incrementCounter
  (currentCounter : Resource) : Transaction :=
  let
    updatedCounter : Resource :=
      mkCounter@{
        nullifierPubKey := universalPubKey;
        ephemeral := false;
        uniqueLabel := getLabel currentCounter;
        count := Resource.data currentCounter + 1
      };
    extra :=
    Data.Map.fromList [
    mkResourceRelationshipExtraDataMapEntry@{
        nullifierKey := universalPrivKey; 
        origin := currentCounter;
        mustBeConsumed := [];
        mustBeCreated := [updatedCounter]
      }];
  in mkTransaction
    universalPrivKey
    [currentCounter]
    [updatedCounter]
    extra;
