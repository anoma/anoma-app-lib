module Utils.Counter.Transaction;

import Stdlib.Prelude open;
import Stdlib.Data.Set as Set open using {Set};
import Anoma.Resource open;
import Anoma.Identity open;
import Anoma.Transaction open;
import Anoma.Utils open;
import Anoma.Builtin.System open;
import Anoma.Proving.Types open;

import AnomaHelpers open;
import Resource.Error open;
import Authorization.Message open;
import Authorization.Identities open;
import Utils.Dummy.Resource open;
import Utils.Counter.Label open;
import Utils.Counter.Resource open;

import AnomaHelpers open;

-- TODO use general initialize/traits
--- Requires a consumable `Utils.Dummy.Resource`.
createCounter
  (standardInputs : StandardInputs)
  (consumableDummy : Resource)
  : Result StandardError Transaction :=
  let
    identity := StandardInputs.identity standardInputs;
    nullifierKey := standardInputs |> StandardInputs.identity |> toNullifierKey;
    ephDummy : Resource :=
      alwaysValidResource@{
        quantity := 1;
        identity;
        ephemeral := true
      };

  in if
    | kind consumableDummy /= kind ephDummy :=
      throw
        mkDefaultError@{
          msg := "The provided consumable resource has the wrong kind."
        }
    | else :=
      let
        uniqueLabel := createUniqueCounterLabel consumableDummy;
        -- TODO how to deal with randomness here?
        ephCounter : Resource :=
          mkCounter@{
            ephemeral := true;
            uniqueLabel;
            count := 0
          };
        newCounter :=
          mkCounter@{
            ephemeral := false;
            uniqueLabel;
            count := 0
          };
        consumed := Set.fromList [consumableDummy; ephCounter];
        created := Set.fromList [ephDummy; newCounter];
      in ok
        mkTransactionHelper@{
          roots := Set.fromList [StandardInputs.currentRoot standardInputs];
          actions :=
            Set.singleton
              mkActionHelper@{
                identity := StandardInputs.identity standardInputs;
                consumed;
                created;
                appData := Set.empty;
                customInputs :=
                  resourceMapping@{
                    identity;
                    consumed;
                    created
                  }
              }
        };

incrementCounter (standardInputs : StandardInputs) (currentCounter : Resource) : Transaction :=
  let
    updatedCounter : Resource :=
      mkCounter@{
        ephemeral := false;
        uniqueLabel := getCounterLabel currentCounter;
        count :=
          (currentCounter |> Resource.valueRef |> Ref.fromRef |> Value.unValue |> anomaDecode) + 1
      };
    consumed := Set.singleton currentCounter;
    created := Set.singleton updatedCounter;
  in mkTransactionHelper@{
    roots := Set.singleton (StandardInputs.currentRoot standardInputs);
    actions :=
      Set.singleton
        mkActionHelper@{
          identity := Universal.identity;
          consumed := Set.singleton currentCounter;
          created := Set.singleton updatedCounter;
          appData := Set.empty;
          customInputs := Set.empty
        }
  };
