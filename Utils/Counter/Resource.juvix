module Utils.Counter.Resource;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Utils open;
import Anoma.Builtin.System open;
import AnomaHelpers open;

--import Resource.Traits open;
import Utils.Counter.Logic open;
import Utils.Counter.Label open;

mkCounter
  (nullifierKeyCommitment : NullifierKeyCommitment)
  (ephemeral : Bool)
  (uniqueLabel : CounterLabel)
  (count : Nat)
  : Resource :=
  mkResource@{
    logicRef := Ref.toRef counterLogic;
    labelRef := uniqueLabel |> anomaEncode |> mkLabel |> Ref.toRef;
    valueRef := count |> mkValue |> Ref.toRef;
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment;
    nonce := mkNonce rand;
    randSeed := mkRandSeed rand
  };

isCounter (resource : Resource) : Bool := Resource.logicRef resource == Ref.toRef counterLogic;
