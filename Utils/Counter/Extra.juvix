module Utils.Counter.Extra;

import Stdlib.Prelude open;
import Data.Set open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Message open;
import Utils.Counter.Count open;

findCreatedCounter
  (consumedCounter : Resource)
  (tx : Transaction)
  : Maybe Resource :=
  let
    selfCm : Helper.Commitment := commitment consumedCounter;
    lookupResult
      : Maybe (Pair ResourceRelationship Signature) :=
      lookupExtraData (natToBytes32 selfCm) tx;
  in case lookupResult of
       | nothing := nothing
       | just (msg, _) :=
         let
           searchResult : Maybe Resource :=
             case
               Data.Set.toList (ResourceRelationship.mustBeCreated msg)
             of
               | [elem] := just (commitmentResource elem)
               | _ := nothing;
         in case searchResult of
              | just foundCounter :=
                if
                  | ResourceRelationship.origin msg == selfCm
                    && isCreated foundCounter tx := searchResult
                  | else := nothing
              | nothing := nothing;
