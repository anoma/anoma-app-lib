module Utils.Counter.Extra;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set};
import Anoma open;
import AnomaHelpers open;

import Authorization.Message open;
import Utils.Counter.Count open;

findCreatedCounter
  (consumedCounter : Resource)
  (tx : Transaction)
  : Maybe Resource :=
  let
    selfCm : Helper.Commitment := commitment consumedCounter;
    lookupResult
      : Maybe (Pair ResourceRelationship Signature) :=
      lookupExtraData (natToBytes32 selfCm) tx;
  in case lookupResult of
       | nothing := nothing
       | just (msg, _) :=
         case
           Set.toList (ResourceRelationship.mustBeCreated msg)
         of
           | _ := nothing
           | [elem] :=
             let
               foundCounter : Resource := commitmentResource elem;
             in if
               | ResourceRelationship.origin msg == selfCm
                 && isCreated foundCounter tx := just foundCounter
               | else := nothing;
