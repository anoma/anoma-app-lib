module Utils.Counter.Label;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Builtin.System open;

type CounterLabel := mkCounterLabel@{nf : Nullifier};

instance
CounterLabel-Eq : Eq CounterLabel :=
  mkEq@{
    eq (lhs rhs : CounterLabel) : Bool := CounterLabel.nf lhs == CounterLabel.nf rhs
  };

-- TODO -- |> anomaEncode |> anomaDecode is WRONG. ASK PAUL HOW TO DECODE DATA REF  IF IT IS SUPPOSED TO BE OPAQUE
get (resource : Resource) : CounterLabel :=
  resource |> Resource.labelRef |> LabelRef.unLabelRef |> anomaEncode |> anomaDecode;

getNullifierfFromLabel (resource : Resource) : Nullifier := resource |> get |> CounterLabel.nf;
