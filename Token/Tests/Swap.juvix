module Token.Tests.Swap;

import Test.JuvixUnit open;

import Stdlib.Prelude open;
import Stdlib.Debug open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Identities open;
import Resource.Error open;
import Resource.Traits open;
import Transaction.Swap open;

import Token.Logic open;
import Token.Resource open;
import Token.Tests.Helpers open;

import Intent.Asset open;
import Intent.Swap.Resource open;
import Intent.Swap.Solution open;
import Intent.Swap.Logic open;

wantAlice : QuantifiedAssets := mkQuantifiedAssets All [mkAsset 5 bobKudos];

wantBob : QuantifiedAssets := mkQuantifiedAssets All [mkAsset 3 aliceKudos];

aliceTokenOwnedByAlice : Token := Token.create 3 aliceKudosLabel Alice.pubKey;

bobsBobKudos : Token := Token.create 5 bobKudosLabel Bob.pubKey;

aliceSwapIntentResource : SwapIntent :=
  SwapIntent.create@{
    want := wantAlice;
    receiver := Alice.pubKey;
    solver := Carol.pubKey
  };

bobSwapIntentResource : SwapIntent :=
  SwapIntent.create@{
    want := wantBob;
    receiver := Bob.pubKey;
    solver := Carol.pubKey
  };

alicesIntentTx : Transaction :=
  case
    Transaction.Swap.swap@{
      self := Alice.keyPair;
      toSwap := [aliceTokenOwnedByAlice];
      intent := aliceSwapIntentResource
    }
  of
    | ok tx := tx
    | error err := failwith (Show.show err);

bobsIntentTx : Transaction :=
  case
    Transaction.Swap.swap@{
      self := Bob.keyPair;
      toSwap := [bobsBobKudos];
      intent := bobSwapIntentResource
    }
  of
    | ok tx := tx
    | error err := failwith (Show.show err);

carolsSolutionForAliceTx : Transaction :=
  Solution.toTransaction
    (Carol.keyPair)
    Solution.mk@{
      intent := aliceSwapIntentResource;
      created := [HasOwner.set Alice.pubKey bobsBobKudos]
    };

carolsSolutionForBobTx : Transaction :=
  Solution.toTransaction
    (Carol.keyPair)
    Solution.mk@{
      intent := bobSwapIntentResource;
      created := [HasOwner.set Bob.pubKey aliceTokenOwnedByAlice]
    };

balancedTx : Transaction :=
  composeAll [alicesIntentTx; bobsIntentTx; carolsSolutionForAliceTx; carolsSolutionForBobTx];

tests : List Test :=
  [ testCase
    "Alice's token should be satisfied"
    (expectTrue
      tokenLogic@{
        supply := Unbound;
        originator := Alice.pubKey;
        self := Convertable.toResource aliceTokenOwnedByAlice;
        tx := balancedTx
      })
  ; testCase
    "Alice's intent should be satisfied"
    (expectTrue
      swapIntentLogic@{
        want := wantAlice;
        receiver := Alice.pubKey;
        self := Convertable.toResource aliceSwapIntentResource;
        tx := balancedTx
      })
  ; testCase
    "Bob's token should be satisfied"
    (expectTrue
      tokenLogic@{
        supply := Unbound;
        originator := Bob.pubKey;
        self := Convertable.toResource bobsBobKudos;
        tx := balancedTx
      })
  ; testCase
    "Bob's intent should be satisfied"
    (expectTrue
      swapIntentLogic@{
        want := wantBob;
        receiver := Bob.pubKey;
        self := Convertable.toResource bobSwapIntentResource;
        tx := balancedTx
      })
  ];

main : IO := runTestSuite (testSuite "Swap Tests" tests);
