module Token.Tests.TokenLogic;

import Stdlib.Prelude open;
import Stdlib.Debug open using {failwith};
import Test.JuvixUnit open;
import Anoma open;
import Anoma.Rep open;
import AnomaHelpers open;

import Authorization.Identities open;

import Resource.Traits open;
import Resource.Error open;
import Transaction.Traits open;
import Transaction.Transfer as Tx open using {transfer};
import Transaction.Initialize as Tx open using {initialize};

import Token.Label open;
import Token.Logic open;
import Token.Resource open;
import Token.Transaction open;

import Token.Tests.Helpers open;
import Utils.Dummy.Resource open;
import Utils.Dummy.Transaction as Dummy open using {initialize; finalize};

module ConsumptionSide;

  module Initialization;
    unboundSupplyInitTest : Test :=
      let
        supply : Supply := Unbound;
        label : Label := exampleLabel@Label{supply := supply};
        created : Token := HasLabel.set label exampleToken;
        consumed : Token := HasEphemerality.set Ephemerality.Ephemeral created;
      in testCase
        ("Initialization logic should be valid for tokens with "
          ++str Show.show supply
          ++str " supply")
        (expectTrue
          tokenLogic@{
            supply;
            originator := KeyPair.pubKey Token.Tests.Helpers.self;
            self := Convertable.toResource consumed;
            tx :=
              TransactionConvertable.toTransaction
                (KeyPair.privKey Token.Tests.Helpers.self)
                [consumed]
                [created]
          });

    fixedSupplyInitTest : Test :=
      let
        dummy : Resource :=
          mkDummy@{
            npk := KeyPair.pubKey self;
            eph := false
          };
        dummyNf :=
          nullifier@{
            r := dummy;
            privateKey := KeyPair.privKey self
          };
        supply := Fixed dummyNf;
        label : Label := exampleLabel@Label{supply := supply};
        created : Token := HasLabel.set label exampleToken;
        consumed : Token := HasEphemerality.set Ephemerality.Ephemeral created;
        tokenInitTx :=
          TransactionConvertable.toTransaction
            (KeyPair.privKey Token.Tests.Helpers.self)
            [consumed]
            [created];
        dummyConsumptionTx :=
          Dummy.finalize@{
            self;
            dummy
          };

      in testCase
        ("Initialization logic should be valid for tokens with "
          ++str Show.show supply
          ++str " supply")
        (expectTrue
          tokenLogic@{
            supply;
            originator := KeyPair.pubKey Token.Tests.Helpers.self;
            self := Convertable.toResource consumed;
            tx := composeAll [tokenInitTx; dummyConsumptionTx]
          });

    fixedSupplyInitWrongNfTest : Test :=
      let
        dummy : Resource :=
          mkDummy@{
            npk := KeyPair.pubKey self;
            eph := false
          };
        wrongNf := Nullifier.mk 1234;
        supply := Fixed wrongNf;
        label : Label := exampleLabel@Label{supply := supply};
        created : Token := HasLabel.set label exampleToken;
        consumed : Token := HasEphemerality.set Ephemerality.Ephemeral created;

        tx :=
          compose@{
            tx1 := TransactionConvertable.toTransaction (KeyPair.privKey self) [consumed] [created];
            tx2 :=
              Dummy.finalize@{
                self;
                dummy
              }
          };

      in testCase
        "Fixed Initialization logic should be invalid if the specified nullifier is not present."
        (expectFalse
          tokenLogic@{
            supply;
            originator := KeyPair.pubKey Token.Tests.Helpers.self;
            self := Convertable.toResource consumed;
            tx :=
              TransactionConvertable.toTransaction
                (KeyPair.privKey Token.Tests.Helpers.self)
                [consumed]
                [created]
          });

    tests : List Test := [unboundSupplyInitTest; fixedSupplyInitTest; fixedSupplyInitWrongNfTest];

  end;

  module TransferLogic;
    transferTx (token : Token) : Transaction :=
      case
        Tx.transfer@{
          self;
          toTransfer := token;
          receiver := Zero.pubKey
        }
      of
        | ok tx := tx
        | error err := failwith (Show.show err);

    nonTransferableTokenTest (supply : Supply) : Test :=
      let
        label :=
          exampleLabel@Label{
            transferability := Transferability.NonTransferable;
            supply := supply
          };
        token := HasLabel.set label exampleToken;
      in testCase
        ("Transfer logic should return false when transferring a non-transferable token with "
          ++str Show.show supply
          ++str " supply")
        (expectFalse
          tokenLogic@{
            supply;
            originator := KeyPair.pubKey Token.Tests.Helpers.self;
            self := Convertable.toResource token;
            tx :=
              transferTx@{
                token
              }
          });

    transferableTokenTest (supply : Supply) : Test :=
      let
        label :=
          exampleLabel@Label{
            transferability := Transferability.NonTransferable;
            supply := supply
          };
        token := HasLabel.set label exampleToken;
      in testCase
        ("Transfer logic should return true when transferring a transferable token with "
          ++str Show.show supply
          ++str " supply")
        (expectTrue
          tokenLogic@{
            supply;
            originator := KeyPair.pubKey Token.Tests.Helpers.self;
            self := Convertable.toResource token;
            tx :=
              transferTx@{
                token
              }
          });

    tests : List Test :=
      map nonTransferableTokenTest [Unbound; Fixed nf]
        ++ map transferableTokenTest [Unbound; Fixed nf];
  end;
end;

module CreationSide;

  expectedReturnValTest (ephemeral : Bool) (expected : Bool) (supply : Supply) : Test :=
    let
      token :=
        exampleToken
          |> HasEphemerality.set Ephemerality.Ephemeral
          |> HasTransferability.set Transferability.Transferable
          |> HasSupply.set supply;
      tx := TransactionConvertable.toTransaction {Token} {Token} (KeyPair.privKey self) [] [token];

    in testCase
      ("It should be "
        ++str case expected of {
                | true := "valid"
                | false := "invalid"
              }
        ++str " for created, "
        ++str case ephemeral of {
                | true := "ephemeral"
                | false := "non-ephemeral"
              }
        ++str " tokens with "
        ++str Show.show supply
        ++str " supply")
      (expectEqual
        tokenLogic@{
          supply;
          originator := KeyPair.pubKey Token.Tests.Helpers.self;
          self := Convertable.toResource token;
          tx
        }
        expected);

  tests : List Test :=
    [ expectedReturnValTest@{
      ephemeral := true;
      expected := true;
      supply := Unbound
    }
    ; expectedReturnValTest@{
      ephemeral := true;
      expected := false;
      supply := Fixed nf
    }
    ]
      ++ map (expectedReturnValTest false true) [Unbound; Fixed nf];
end;

tests : List Test := ConsumptionSide.Initialization.tests;
-- ++ ConsumptionSide.TransferLogic.tests ++ CreationSide.tests;

main : IO := runTestSuite (testSuite "Token Logic Tests" tests);
