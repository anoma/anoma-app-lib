module Token.Tests.Helpers;

import Stdlib.Prelude open;
import Anoma open;
import Test.JuvixUnit open;

import Authorization.Identities open;
import Resource.Traits open;
import Token.Label open;
import Token.Resource open;

import Utils.Dummy.Resource open;

nf : Nullifier :=
  Nullifier.mk@{
    unNullifier := 123
  };

self : KeyPair := Universal.keyPair;

aliceKudosLabel : Label := exampleLabel@Label{originator := Alice.pubKey};

bobKudosLabel : Label := exampleLabel@Label{originator := Bob.pubKey};

aliceKudos : Kind := kindFromTokenLabel (aliceKudosLabel);

bobKudos : Kind := kindFromTokenLabel (bobKudosLabel);

exampleLabel : Label :=
  mkLabel@{
    name := "Kudos";
    symbol := "KDS";
    decimals := 18;
    supply := Unbound;
    transferability := Transferability.Transferable;
    originator := KeyPair.pubKey self
  };

exampleTokenWithUnboundSupply : Token :=
  Token.create@{
    quantity := 1;
    tokenLabel := exampleLabel;
    npk := KeyPair.pubKey self
  };

dummy : Resource :=
  mkDummy@{
    npk := KeyPair.pubKey self;
    eph := false
  };

dummyNf : Nullifier :=
  nullifier@{
    r := dummy;
    privateKey := KeyPair.privKey self
  };

exampleTokenWithFixedSupply1 : Token :=
  Token.create@{
    quantity := 1;
    tokenLabel := exampleLabel@Label{supply := Fixed dummyNf};
    npk := KeyPair.pubKey self
  };

exampleTokenWithFixedSupply2 : Token := HasSupply.set (Fixed dummyNf) exampleTokenWithUnboundSupply;
-- The code below works (and results in a failing test):
--exampleTokenWithFixedSupply2 : Token := HasSupply.set (Fixed dummyNf) exampleTokenWithFixedSupply1;
