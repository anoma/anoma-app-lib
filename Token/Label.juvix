module Token.Label;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Utils open;
import Anoma.Identity.External open;
import Anoma.Builtin.System open;

import AnomaHelpers open;
import Resource.Traits open;

type TokenLabel :=
  mkTokenLabel {
    name : String;
    symbol : String;
    decimals : Nat;
    supply : Supply;
    transferability : Transferability;
    originator : ExternalIdentity
  };

instance
TokenLabel-Eq : Eq TokenLabel :=
  let
    toProd (l : TokenLabel) : _ :=
      TokenLabel.name l
        , TokenLabel.symbol l
        , TokenLabel.decimals l
        , TokenLabel.supply l
        , TokenLabel.originator l;
  in mkEq@{
    eq (l1 l2 : TokenLabel) : Bool := toProd l1 == toProd l2
  };

instance
TokenLabel-Show : Show TokenLabel :=
  mkShow
    \ {l :=
      "{"
        ++str "name : "
        ++str (l |> TokenLabel.name |> Show.show)
        ++str ", "
        ++str "symbol : "
        ++str (l |> TokenLabel.symbol |> Show.show)
        ++str ", "
        ++str "decimals : "
        ++str (l |> TokenLabel.decimals |> Show.show)
        ++str ", "
        ++str "supply : "
        ++str (l |> TokenLabel.supply |> Show.show)
        ++str ", "
        ++str "transferable : "
        ++str (l |> TokenLabel.transferability |> Show.show)
        ++str ", "
        ++str "originator : "
        ++str (l |> TokenLabel.supply |> Show.show)
        ++str "}"};

getTokenLabel (r : Resource) : TokenLabel :=
  r |> Resource.labelRef |> Ref.fromRef |> Label.unLabel |> anomaDecode;

getTokenName (r : Resource) : String := TokenLabel.name (getTokenLabel r);

getTokenSymbol (r : Resource) : String := TokenLabel.symbol (getTokenLabel r);

getTokenDecimals (r : Resource) : Nat := TokenLabel.decimals (getTokenLabel r);

-- TODO generalize / eliminate
isTransferable (r : Resource) : Bool :=
  r |> getTokenLabel |> TokenLabel.transferability |> Transferability.toBool;

toLabelRef (tokenLabel : TokenLabel) : LabelRef :=
  tokenLabel |> anomaEncode |> mkLabel |> Ref.toRef;

fromLabelRef (labelRef : LabelRef) : TokenLabel :=
  labelRef |> Ref.fromRef |> Label.unLabel |> anomaDecode;

type InvalidLabelError :=
  mkInvalidLabelError {
    expected : TokenLabel;
    actual : TokenLabel
  };

instance
InvalidLabelError-Show : Show InvalidLabelError :=
  mkShow
    \ {e :=
      "InvalidLabelError:\n{"
        ++str "expected : "
        ++str (e |> InvalidLabelError.expected |> Show.show)
        ++str ", "
        ++str "actual"
        ++str (e |> InvalidLabelError.actual |> Show.show)
        ++str "}"};
