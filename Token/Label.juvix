module Token.Label;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Token.Supply open;

type Label :=
  mkLabel {
    name : String;
    symbol : String;
    decimals : Nat;
    supply : Supply;
    transferable : Bool;
    originator : PublicKey
  };

instance
Label-Eq : Eq Label :=
  let
    toProd (l : Label) : _ :=
      Label.name l, Label.symbol l, Label.decimals l, Label.supply l, Label.originator l;
  in mkEq@{
    eq (l1 l2 : Label) : Bool := toProd l1 == toProd l2
  };

instance
Label-Show : Show Label :=
  mkShow
    \ {l :=
      "{"
        ++str "name : "
        ++str (l |> Label.name |> Show.show)
        ++str ", "
        ++str "symbol : "
        ++str (l |> Label.symbol |> Show.show)
        ++str ", "
        ++str "decimals : "
        ++str (l |> Label.decimals |> Show.show)
        ++str ", "
        ++str "supply : "
        ++str (l |> Label.supply |> Show.show)
        ++str ", "
        ++str "transferable : "
        ++str (l |> Label.transferable |> Show.show)
        ++str ", "
        ++str "originator : "
        ++str (l |> Label.supply |> Show.show)
        ++str "}"};

getLabel (r : Resource) : Label := anomaDecode (Resource.label r);

getName (r : Resource) : String := Label.name (getLabel r);

getSymbol (r : Resource) : String := Label.symbol (getLabel r);

getDecimals (r : Resource) : Nat := Label.decimals (getLabel r);

getSupply (r : Resource) : Supply := Label.supply (getLabel r);

isTransferable (r : Resource) : Bool := Label.transferable (getLabel r);

getOriginator (r : Resource) : PublicKey := Label.originator (getLabel r);

type InvalidLabelError :=
  mkInvalidLabelError {
    expected : Label;
    actual : Label
  };

instance
InvalidLabelError-Show : Show InvalidLabelError :=
  mkShow
    \ {e :=
      "InvalidLabelError:\n{"
        ++str "expected : "
        ++str (e |> InvalidLabelError.expected |> Show.show)
        ++str ", "
        ++str "actual"
        ++str (e |> InvalidLabelError.actual |> Show.show)
        ++str "}"};

type NonTransferableError := mkNonTransferableError;

instance
NonTransferableError-Show : Show NonTransferableError := mkShow \ {e := "NonTransferableError"};
