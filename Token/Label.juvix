module Token.Label;

import Stdlib.Prelude open;
import Anoma open;

import Token.Supply open;

type Label :=
  mkLabel {
    name : Nat;
    -- TODO This should become a ;String; once `natToString` is implemented.
    symbol : String;
    decimals : Nat;
    supply : Supply
  };

instance
Label-Eq : Eq Label :=
  let
    toProd (l : Label) : _ :=
      Label.name l
        , Label.symbol l
        , Label.decimals l
        , Label.supply l;
  in mkEq@{
    eq (l1 l2 : Label) : Bool := toProd l1 == toProd l2
  };

getLabel (r : Resource) : Label :=
  anomaDecode (Resource.label r);

getName (r : Resource) : Nat := Label.name (getLabel r);

getSymbol (r : Resource) : String :=
  Label.symbol (getLabel r);

getDecimals (r : Resource) : Nat :=
  Label.decimals (getLabel r);

getSupply (r : Resource) : Supply :=
  Label.supply (getLabel r);
