module Token.Label;

import Stdlib.Prelude open;
import Anoma open;

type Supply :=
  | Unbound
  | Fixed
  | Capped;

instance
Supply-Eq : Eq Supply :=
  mkEq@{
    eq (s1 s2 : Supply) : Bool := s1 == s2
  };

type Label :=
  mkLabel {
    name : Nat;
    -- TODO This should become a ;String; once `natToString` is implemented.
    symbol : String;
    decimals : Nat;
    supply : Supply
  };

instance
Label-Eq : Eq Label :=
  mkEq@{
    eq (l1 l2 : Label) : Bool :=
      Label.name l1 == Label.name l2
        && Label.symbol l1 == Label.symbol l2
        && Label.decimals l1 == Label.decimals l2
        && Label.supply l1 == Label.supply l2
  };

getLabel (r : Resource) : Label :=
  anomaDecode (Resource.label r);

getName (r : Resource) : Nat := Label.name (getLabel r);

getSymbol (r : Resource) : String :=
  Label.symbol (getLabel r);

getDecimals (r : Resource) : Nat :=
  Label.decimals (getLabel r);


getSupply (r : Resource) : Supply :=
  Label.supply (getLabel r);
