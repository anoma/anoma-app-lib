module Token.Supply;

import Stdlib.Prelude open;
import Anoma open;

type FixingNullifier :=
  mkFixingNullifier {nf : Helper.Nullifier};

type Supply :=
  | Unbound
  | Capped
  | Fixed FixingNullifier;

instance
Supply-Eq : Eq Supply :=
  mkEq@{
    eq : Supply -> Supply -> Bool
      | Unbound Unbound := true
      | Capped Capped := true
      | (Fixed f1) (Fixed f2) :=
        FixingNullifier.nf f1 == FixingNullifier.nf f2
      | _ _ := false
  };

instance
Supply-Show : Show Supply :=
  mkShow
    \ {
      | Unbound := "Unbound"
      | Capped := "Capped"
      | (Fixed f) :=
        "Fixed (nf: "
          ++str natToString (FixingNullifier.nf f)
          ++str ")"
    };
