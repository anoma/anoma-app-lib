module Token.Resource;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Resource.Traits open;
import Token.Label open;
import Token.Logic open;

module Token;
  type Token := mk {resource : Resource};

  create (quantity : Nat) (tokenLabel : Label) (npk : PublicKey) {eph : Bool := false} : Token :=
    mk
      Resource.mk@{
        logic := tokenLogic (Label.supply tokenLabel) (Label.originator tokenLabel);
        label := anomaEncode (tokenLabel);
        quantity;
        data := 0;
        eph;
        npk;
        nonce := rand;
        rseed := rand
      };

  open Token public;
end;

open Token using {Token} public;

instance
Token-Convertable : Convertable Token :=
  mkConvertable@{
    toResource (token : Token) : Resource := Token.resource token;
    fromResource (resource : Resource) : Token :=
      Token.mk@{
        resource
      }
  };

kindFromTokenLabel (tokenLabel : Label) : Kind :=
  Kind.fromLabelAndLogic@{
    logic := tokenLogic (Label.supply tokenLabel) (Label.originator tokenLabel);
    label := anomaEncode tokenLabel
  };

instance
Token-HasQuantity : HasQuantity Token := FromConvertable.hasQuantity {Token};

instance
Token-HasOwner : HasOwner Token := FromConvertable.hasOwner {Token};

instance
Token-HasEphemerality : HasEphemerality Token := FromConvertable.hasEphemerality {Token};

instance
Token-HasLogic : HasLogic Token := FromConvertable.hasLogic {Token};

instance
Token-HasKind : HasKind Token := FromConvertable.hasKind {Token};

--instance
--Token-Label-HasLabel : HasLabel Token Label :=
--  mkHasLabel@{
--    get (token : Token) : Label := token |> Convertable.toResource |> Resource.label |> anomaDecode;
--    set (label : Label) (token : Token) : Token :=
--      (token |> Convertable.toResource)@Resource{label := anomaEncode label}
--        |> Convertable.fromResource
--  };
getTokenLabel (token : Token) : Label :=
  token |> Convertable.toResource |> Resource.label |> anomaDecode;

setTokenLabel (newLabel : Label) (token : Token) : Token :=
  (token |> Convertable.toResource)@Resource{label := anomaEncode newLabel}
    |> Convertable.fromResource;

instance
Token-HasSupply : HasSupply Token :=
  mkHasSupply@{
    get (token : Token) : Supply := token |> getTokenLabel |> Label.supply;
    set (supply : Supply) (token : Token) : Token :=
      let
        newLabel := (getTokenLabel token)@Label{supply := supply};
      in setTokenLabel newLabel token
  };

instance
Token-HasTransferability : HasTransferability Token :=
  mkHasTransferability@{
    get (token : Token) : Transferability := token |> getTokenLabel |> Label.transferability;
    set (transferability : Transferability) (token : Token) : Token :=
      let
        newLabel := (getTokenLabel token)@Label{transferability := transferability};
      in setTokenLabel newLabel token
  };

instance
Token-HasOriginator : HasOriginator Token :=
  mkHasOriginator@{
    get (token : Token) : PublicKey := token |> getTokenLabel |> Label.originator;
    set (originator : PublicKey) (token : Token) : Token :=
      let
        newLabel := (getTokenLabel token)@Label{originator := originator};
      in setTokenLabel newLabel token
  };
