module Token.Transaction.Send;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open using {compare};
import Anoma open;
import AnomaHelpers open;

import Token.Error open;
import Token.Indexing open;
import Token.Transaction.Transfer open;
import Token.Transaction.Split open;

--- Sends an quantity of token ;Resource; to a receiver, if the calling ;KeyPair; is the owner.
--- If the quantity is lower than of the quantity of the consumed ;Resource;, the function creates
--- a second ;Resource; with the difference being owned by the caller.
--- The function returns a ;TokenError; if
--- - the calling ;KeyPair; is not the owner or
--- - the quantity exceeds the quantity of the resource.
send (self : KeyPair) (token : Resource) (quantity : Nat) (receiver : PublicKey)
: Result TokenError (Pair Transaction (List LedgerAssignment)) :=
  let
    myself : PublicKey := KeyPair.pubKey self;
    balance : Nat := Resource.quantity token;
  in case (compare balance quantity) of
      | LT := throw mkInsufficientQuantityError@{limit := balance; actual := quantity}
      | EQ := transfer self token receiver
      | GT :=
        let
          difference : Nat := toNat (intSubNat balance quantity);
        in
          split self token [(quantity, receiver); (difference, myself)];
