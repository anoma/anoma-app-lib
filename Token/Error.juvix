module Token.Error;

import Stdlib.Prelude open;
import AnomaHelpers open;
import Authorization.Check open;
import Token.Resource open;
import Token.Label open;
import Token.Logic open;

type TokenError :=
  | ErrTokenUnauthorized UnauthorizedError
  | ErrTokenInsufficientQuantity InsufficientQuantityError
  | ErrTokenInvalidLabel InvalidLabelError
  | ErrTokenInvalidLogic InvalidLogicError
  | ErrTokenInvalidKind InvalidKindError
  | ErrNonTransferable NonTransferableError
  | ErrTokenInsufficientElements InsufficientElementsError
  | ErrTokenDefault Error;

instance
TokenError-Show : Show TokenError := mkShow \ {e := "TokenError:\n" ++str Show.show e};

trait
type TokenThrowable E A := mkTokenThrowable {throw : E -> Result TokenError A};

instance
UnauthorizedTokenThrowable {A} : TokenThrowable UnauthorizedError A :=
  mkTokenThrowable@{
    throw (e : UnauthorizedError) : Result TokenError A := error {_} {A} (ErrTokenUnauthorized e)
  };

instance
InsufficientQuantityThrowable {A} : TokenThrowable InsufficientQuantityError A :=
  mkTokenThrowable@{
    throw (e : InsufficientQuantityError) : Result TokenError A :=
      error {_} {A} (ErrTokenInsufficientQuantity e)
  };

instance
InsufficientElementsThrowable {A} : TokenThrowable InsufficientElementsError A :=
  mkTokenThrowable@{
    throw (e : InsufficientElementsError) : Result TokenError A :=
      error {_} {A} (ErrTokenInsufficientElements e)
  };

instance
InvalidLabelThrowable {A} : TokenThrowable InvalidLabelError A :=
  mkTokenThrowable@{
    throw (e : InvalidLabelError) : Result TokenError A := error {_} {A} (ErrTokenInvalidLabel e)
  };

instance
InvalidLogicThrowable {A} : TokenThrowable InvalidLogicError A :=
  mkTokenThrowable@{
    throw (e : InvalidLogicError) : Result TokenError A := error {_} {A} (ErrTokenInvalidLogic e)
  };

instance
InvalidKindThrowable {A} : TokenThrowable InvalidKindError A :=
  mkTokenThrowable@{
    throw (e : InvalidKindError) : Result TokenError A := error {_} {A} (ErrTokenInvalidKind e)
  };

instance
NonTransferableThrowable {A} : TokenThrowable NonTransferableError A :=
  mkTokenThrowable@{
    throw (e : NonTransferableError) : Result TokenError A := error {_} {A} (ErrNonTransferable e)
  };

instance
ErrorThrowable {A} : TokenThrowable Error A :=
  mkTokenThrowable@{
    throw (e : Error) : Result TokenError A := error {_} {A} (ErrTokenDefault e)
  };

open TokenThrowable public;
