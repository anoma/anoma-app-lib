module Token.Error;

import Stdlib.Prelude open;
import AnomaHelpers open;
import Authorization.Check open;
import Token.Resource open;
import Token.Label open;
import Token.Logic open;

type TokenError :=
  | ErrTokenUnauthorized UnauthorizedError
  | ErrTokenInsufficientQuantity InsufficientQuantityError
  | ErrTokenInvalidLabel InvalidLabelError
  | ErrTokenInvalidLogic InvalidLogicError
  | ErrTokenInsufficientElements InsufficientElementsError
  | ErrTokenDefault Error;

instance
TokenError-Show : Show TokenError :=
  mkShow \ {e := "TokenError:\n" ++str Show.show e};

trait
type TokenThrowable Error Result :=
  mkTokenThrowable {throw : Error
    -> Either TokenError Result};

instance
UnauthorizedTokenThrowable
  {A} : TokenThrowable UnauthorizedError A :=
  mkTokenThrowable@{
    throw (e : UnauthorizedError) : Either TokenError A :=
      left {_} {A} (ErrTokenUnauthorized e)
  };

instance
InsufficientQuantityThrowable
  {A} : TokenThrowable InsufficientQuantityError A :=
  mkTokenThrowable@{
    throw
      (e : InsufficientQuantityError) : Either TokenError A :=
      left {_} {A} (ErrTokenInsufficientQuantity e)
  };

instance
InsufficientElementsThrowable
  {A} : TokenThrowable InsufficientElementsError A :=
  mkTokenThrowable@{
    throw
      (e : InsufficientElementsError) : Either TokenError A :=
      left {_} {A} (ErrTokenInsufficientElements e)
  };

instance
InvalidLabelThrowable
  {A} : TokenThrowable InvalidLabelError A :=
  mkTokenThrowable@{
    throw (e : InvalidLabelError) : Either TokenError A :=
      left {_} {A} (ErrTokenInvalidLabel e)
  };

instance
InvalidLogicThrowable
  {A} : TokenThrowable InvalidLogicError A :=
  mkTokenThrowable@{
    throw (e : InvalidLogicError) : Either TokenError A :=
      left {_} {A} (ErrTokenInvalidLogic e)
  };

instance
ErrorThrowable {A} : TokenThrowable Error A :=
  mkTokenThrowable@{
    throw (e : Error) : Either TokenError A :=
      left {_} {A} (ErrTokenDefault e)
  };

open TokenThrowable public;

pass {A} (a : A) : Either TokenError A := right a;
