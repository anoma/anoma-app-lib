module Token.Logic;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Owner open;
import Token.Supply open;
import Token.Label open;

tokenLogic
  (supply : Supply) : Resource -> Transaction -> Bool :=
  case supply of
    | Unbound := unboundSupplyLogic
    | Fixed := fixedSupplyLogic
    | Capped := cappedSupplyLogic;

unboundSupplyLogic
  (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx of
    | Consumed := isAuthorizedByOwner self tx
    | Created := true
    | NonExistent := false;

fixedSupplyLogic
  (self : Resource) (tx : Transaction) : Bool :=
  case ephemerality self of
    | Ephemeral :=
      case lifecycle self tx of {
        | Consumed := isNullifierPresent (getUniqueness self) tx
        | Created := false
        | NonExistent := false
      }
    | NonEphemeral :=
      case lifecycle self tx of
        | Consumed := isAuthorizedByOwner self tx
        | Created := true
        | NonExistent := false;

axiom cappedSupplyLogic : Resource -> Transaction -> Bool;
