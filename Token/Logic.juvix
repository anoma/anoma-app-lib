module Token.Logic;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open using {failwith};
import Anoma.Resource open;
import Anoma.Identity open;
import Anoma.Proving.Types open;

import AnomaHelpers open;

import Resource.Traits open;
import Authorization.Check open;
import Authorization.Identities open;
import Token.Label open;

tokenLogic
  (supply : Supply)
  (originator : ExternalIdentity)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool :=
  case supply of
    | Unbound := unboundSupplyLogic originator publicInputs privateInputs
    | Capped := cappedSupplyLogic originator publicInputs privateInputs
    | Fixed nullifier := fixedSupplyLogic nullifier originator publicInputs privateInputs;

unboundSupplyLogic
  (originator : ExternalIdentity)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Logic.Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             case HasEphemerality.get self of {
               | Ephemeral := unboundSupplyInitializationLogic originator tag publicInputs
               | NonEphemeral := transferLogic self tag publicInputs
             }
         }
       | Logic.Created commitment := true;

unboundSupplyInitializationLogic
  (originator : ExternalIdentity) (tag : Logic.Tag) (publicInputs : Logic.Instance) : Bool :=
  isAuthorizedBy@{
    signer := originator;
    origin := tag;
    publicInputs
  };

fixedSupplyLogic
  (passedNullifier : Nullifier)
  (originator : ExternalIdentity)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Logic.Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             case HasEphemerality.get self of {
               | Ephemeral :=
                 fixedSupplyInitializationLogic originator passedNullifier tag publicInputs
               | NonEphemeral := transferLogic self tag publicInputs
             }
         }
       | Logic.Created commitment :=
         case lookupResource commitment customInputs of
           | nothing := false
           | just self :=
             case HasEphemerality.get self of
               | Ephemeral := false
               | NonEphemeral := true;

fixedSupplyInitializationLogic
  (originator : ExternalIdentity)
  (nullifier : Nullifier)
  (tag : Logic.Tag)
  (publicInputs : Logic.Instance)
  : Bool :=
  isNullifierPresent@{
      nullifier;
      nullifierSet := Logic.Instance.nullifiers publicInputs
    }
    && isAuthorizedBy@{
      signer := originator;
      origin := tag;
      publicInputs
    };

cappedSupplyLogic
  (originator : ExternalIdentity)
  (publicInputs : Logic.Instance)
  (privateInputs : Logic.Witness)
  : Bool := failwith "NOT IMPLEMENTED";

transferLogic (self : Resource) (tag : Logic.Tag) (publicInputs : Logic.Instance) : Bool :=
  isTransferable self
    && isAuthorizedBy@{
      signer := HasOwner.get self;
      origin := tag;
      publicInputs
    };
