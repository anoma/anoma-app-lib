module Token.Logic;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Owner open;
import Token.Supply open;
import Token.Label open;

tokenLogic
  (supply : Supply) : Resource -> Transaction -> Bool :=
  case supply of
    | Unbound := unboundSupplyLogic
    | Capped := cappedSupplyLogic
    | Fixed f := fixedSupplyLogic (FixingNullifier.nf f);

unboundSupplyLogic
  (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx of
    | Consumed := isAuthorizedByOwner self tx
    | Created := true
    | Unknown := false;

fixedSupplyLogic
  (nf : Helper.Nullifier)
  (self : Resource)
  (tx : Transaction)
  : Bool :=
  case ephemerality self of
    | NonEphemeral := unboundSupplyLogic self tx
    | Ephemeral :=
      case lifecycle self tx of
        | Consumed := isNullifierPresent nf tx
        | _ := false;

axiom cappedSupplyLogic : Resource -> Transaction -> Bool;
