module Token.Logic;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Resource.Traits open;
import Authorization.Check open;
import Token.Label open;

tokenLogic (supply : Supply) (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool :=
  case supply of
    | Unbound := unboundSupplyLogic originator self tx
    | Capped := cappedSupplyLogic originator self tx
    | Fixed nf := fixedSupplyLogic nf originator self tx;

unboundSupplyLogic (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx, HasEphemerality.get self of
    | Consumed, Ephemeral := unboundSupplyInitializationLogic originator self tx
    | Consumed, NonEphemeral := transferLogic self tx
    | Created, Ephemeral := true
    | Created, NonEphemeral := true
    | Unknown, _ := false;

unboundSupplyInitializationLogic
  (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool :=
  isAuthorizedBy originator self tx;

fixedSupplyLogic
  (nf : Nullifier) (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx, HasEphemerality.get self of
    | Consumed, Ephemeral := fixedSupplyInitializationLogic nf originator self tx
    | Consumed, NonEphemeral := transferLogic self tx
    | Created, Ephemeral := false
    | Created, NonEphemeral := true
    | Unknown, _ := false;

fixedSupplyInitializationLogic
  (nf : Nullifier) (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool :=
  isNullifierPresent nf tx && isAuthorizedBy originator self tx;

cappedSupplyLogic (originator : PublicKey) (self : Resource) (tx : Transaction) : Bool := false;

-- TODO generalize
transferLogic (self : Resource) (tx : Transaction) : Bool :=
  isTransferable self && isAuthorizedBy (Resource.npk self) self tx;
