module Token.Logic;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Check open;
import Token.Supply open;
import Token.Label open;

tokenLogic (supply : Supply) : Resource -> Transaction -> Bool :=
  case supply of
    | Unbound := unboundSupplyLogic
    | Capped := cappedSupplyLogic
    | Fixed f := fixedSupplyLogic (FixingNullifier.nf f);

unboundSupplyLogic (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx, ephemerality self of
    | Consumed, Ephemeral := unboundSupplyInitializationLogic self tx
    | Consumed, NonEphemeral := transferLogic self tx
    | Created, _ := true
    | Unknown, _ := false;

fixedSupplyLogic (nf : Nullifier) (self : Resource) (tx : Transaction) : Bool :=
  case lifecycle self tx, ephemerality self of
    | Consumed, Ephemeral := fixedSupplyInitializationLogic nf self tx
    | Consumed, NonEphemeral := transferLogic self tx
    | Created, Ephemeral := false
    | Created, NonEphemeral := true
    | Unknown, _ := false;

axiom cappedSupplyLogic : Resource -> Transaction -> Bool;

transferLogic (self : Resource) (tx : Transaction) : Bool :=
  isTransferable self && isAuthorizedBy (getOwner self) self tx;

unboundSupplyInitializationLogic (self : Resource) (tx : Transaction) : Bool :=
  isAuthorizedBy (getOriginator self) self tx;

fixedSupplyInitializationLogic (nf : Nullifier) (self : Resource) (tx : Transaction) : Bool :=
  isAuthorizedBy (getOriginator self) self tx && isNullifierPresent nf tx;

getOwner (r : Resource) : PublicKey := Resource.npk r;
