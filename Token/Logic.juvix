module Token.Logic;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Authorization.Owner open;
import Token.Label open;

tokenLogic (supply : Supply) : Resource -> Transaction -> Bool :=
  case supply of
    | Unbound := unboundSupplyLogic
    | Fixed := fixedSupplyLogic
    | Capped := cappedSupplyLogic;

unboundSupplyLogic (self : Resource) (tx : Transaction) : Bool :=
  if
    | isConsumed self tx := isAuthorizedByOwner self tx
    | isCreated self tx := true
    | else := false;

axiom fixedSupplyLogic : Resource -> Transaction -> Bool;

axiom cappedSupplyLogic : Resource -> Transaction -> Bool;
