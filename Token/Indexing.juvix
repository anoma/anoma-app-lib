module Token.Indexing;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set; insert; delete};
import Data.Map as Map open using {Map};
import Anoma as MyAnoma open;
import AnomaHelpers open;

LedgerAssignment : Type := KeyValue.Assignment (Set Commitment);

ledgerKey (kind : Kind) (account : PublicKey) : KeyValue.Key :=
  KeyValue.mkKey (map natToString [MyAnoma.Kind.unKind kind; PublicKey.unPublicKey account]);

ledgerEntries (kind : Kind) (account : PublicKey) : Set Commitment :=
  anomaGet (ledgerKey kind account);

getKinds (rs : List Resource) : Set Kind :=
  for (acc := Set.empty) (r in rs) {insert (anomaKind r) acc};

getAccounts (rs : List Resource) : Set PublicKey :=
  for (acc := Set.empty) (r in rs) {insert (Resource.npk r) acc};

LedgerMapping : Type := Map Kind (Map PublicKey (Set Commitment));

-- This relies on sets having each entry only once, so that we don't overwrite map entries.
getLedger (rs : List Resource) : LedgerMapping :=
  let
    kinds : List Kind := Set.toList (getKinds rs);
    accounts : List PublicKey := Set.toList (getAccounts rs);
  in for (outerMap := Map.empty) (kind in kinds)
       {Map.insert
         kind
         (for (innerMap := Map.empty) (account in accounts)
           {Map.insert
             account
             ledgerEntries@{
               kind;
               account
             }
             innerMap})
         outerMap};
