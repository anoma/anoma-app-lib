module Token.Indexing;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set; member?; insert; delete};
import Anoma open;

ledgerKey (kind : Kind) (account : PublicKey) : KeyValue.Key :=
  KeyValue.mkKey (map natToString [Kind.unKind kind; PublicKey.unPublicKey account]);

ledgerEntries (kind : Kind) (account : PublicKey) : Set Commitment :=
  anomaGet (ledgerKey kind account);

addCommitment (kind : Kind) (account : PublicKey) (cm : Commitment) : Set Commitment :=
  insert cm (ledgerEntries kind account);

removeCommitment (kind : Kind) (account : PublicKey) (cm : Commitment) : Set Commitment :=
  delete cm (ledgerEntries kind account);

combine {A} {{Ord A}} (a b : Set A) : Set A := Set.fromList (Set.toList a ++ Set.toList b);

instance
Key-Eq : Eq KeyValue.Key :=
  mkEq@{
    eq (l1 l2 : KeyValue.Key) : Bool := anomaEncode l1 == anomaEncode l2
  };

LedgerAssignment : Type := KeyValue.Assignment (Set Commitment);

type Operation :=
  | Add
  | Remove;

ledgerAssign
  (account : PublicKey) (resource : Resource) (operation : Operation) : LedgerAssignment :=
  let
    kind := anomaKind resource;
    cm := commitment resource;
  in KeyValue.assign@{
    key :=
      ledgerKey@{
        kind;
        account
      };
    value :=
      case operation of
        | Add :=
          addCommitment@{
            kind;
            account;
            cm
          }
        | Remove :=
          removeCommitment@{
            kind;
            account;
            cm
          }
  };

combineAssignments (a b : LedgerAssignment) : List LedgerAssignment :=
  let
    keyA := KeyValue.Assignment.key a;
    keyB := KeyValue.Assignment.key b;
  in case keyA == keyB of
       | true :=
         [ KeyValue.assign@{
           key := keyA;
           value := combine (KeyValue.Assignment.value a) (KeyValue.Assignment.value b)
         }
         ]
       | false := [a; b];
