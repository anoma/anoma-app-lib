module Applib.Resource.Traits.Transferability;

import Stdlib.Prelude open;

module Transferability;
  type Transferability :=
    | NonTransferable
    | Transferable;

  fromBool (isTransferable : Bool) : Transferability :=
    case isTransferable of
      | true := Transferable
      | false := NonTransferable;

  toBool (transferability : Transferability) : Bool :=
    case transferability of
      | Transferable := true
      | NonTransferable := false;
end;

open Transferability using {Transferability} public;

instance
Transferability-Eq : Eq Transferability :=
  mkEq@{
    eq (lhs rhs : Transferability) : Bool :=
      Transferability.toBool lhs == Transferability.toBool rhs
  };

instance
Transferability-Show : Show Transferability :=
  mkShow
    \ {eph :=
      case eph of
        | NonTransferable := "NonTransferable"
        | Transferable := "Transferable"};

trait
type HasTransferability ResourceT :=
  mkHasTransferability@{
    get : ResourceT -> Transferability;
    set : Transferability -> ResourceT -> ResourceT
  };
