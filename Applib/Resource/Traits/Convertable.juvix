module Applib.Resource.Traits.Convertable;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Applib.Resource.Traits.NullifierKey open;

trait
type Convertable TypedResource :=
  mkConvertable@{
    toResource : (typedResource : TypedResource) -> Resource;
    fromResource : (resource : Resource) -> TypedResource
  };

{-
type CreatedResource := mkCreatedResource {resource : Resource};

type ConsumedResource :=
  mkConsumedResource {
    resource : Resource;
    nullifierKey : NullifierKey
  };

instance
ConsumedResource-HasNullifierKey : HasNullifierKey ConsumedResource :=
  mkHasNullifierKey@{
    get (consumedResource : ConsumedResource) : NullifierKey :=
      consumedResource |> ConsumedResource.nullifierKey;

    set (nullifierKey : NullifierKey) (consumedResource : ConsumedResource) : ConsumedResource :=
      consumedResource@ConsumedResource{nullifierKey := nullifierKey}
  };
-}

{-
toCreatedResource
  {TypedResource} {{Convertable TypedResource}} (typedResource : TypedResource) : CreatedResource :=
  mkCreatedResource@{
    resource := Convertable.toResource typedResource
  };

toConsumedResource
  {TypedResource}
  {{Convertable TypedResource}}
  (nullifierKey : NullifierKey)
  (typedResource : TypedResource)
  : ConsumedResource :=
  mkConsumedResource@{
    resource := Convertable.toResource typedResource;
    nullifierKey
  };

fromCreateadResource
  {TypedResource}
  {{Convertable TypedResource}}
  (createdResource : CreatedResource)
  : TypedResource := createdResource |> CreatedResource.resource |> Convertable.fromResource;

fromConsumedResource
  {TypedResource}
  {{Convertable TypedResource}}
  (consumedResource : ConsumedResource)
  : TypedResource := consumedResource |> ConsumedResource.resource |> Convertable.fromResource;

-}
