module Applib.Utils.Dummy.Projection;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Stdlib.Debug.Trace open;
import Stdlib.Data.Set as Set open using {Set};

import Anoma.Builtin.System open;
import Anoma.Resource open;
import Anoma.Identity open;

import Applib.Utils.Dummy.Resource open;

import Applib.Resource.Error open;
import Applib.Helpers open;

--- Returns the value contents of a ;Set;  of dummy ;Resource;s.
--- @param dummyResources The dummy ;Resource; ;Set;.
--- @return A list of strings decoded from the resource ;Value; fields.
readValueField (dummyResources : Set Resource) : List String :=
  let
    expectedKind :=
      KindInternal.kind@{
        logicRef := Reference.to alwaysValidLogic;
        labelRef := Reference.to emptyLabel
      };
  in "DEBUG: Evaluating `Applib.Utils.Dummy.Projection.readValueField`"
    >-> map (resource in Set.toList dummyResources)
          {let
            currentKind :=
              kind@{
                resource
              };
          in case currentKind == expectedKind of {
               | true :=
                 resource
                   |> Resource.valueRef
                   |> Reference.from
                   |> Value.unValue
                   |> anomaDecode
                   |> ok
               | false :=
                 throw
                   mkInvalidKindError@{
                     expected := expectedKind;
                     actual := currentKind
                   }
             }
            |> fromResult};
