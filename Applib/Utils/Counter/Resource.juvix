module Applib.Utils.Counter.Resource;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Utils open;
import Anoma.Builtin.System open;
import Anoma.Identity open;
import Applib.Helpers open;

import Applib.Utils.Counter.Logic open;
import Applib.Utils.Counter.Label open;

import Applib.Authorization.Identities open;
import Applib.Random open;

mkCounter
  (identity : Identity) (ephemeral : Bool) (uniqueLabel : CounterLabel) (count : Nat) : Resource :=
  mkResource@{
    logicRef := Reference.to counterLogic;
    labelRef := Reference.to (uniqueLabel |> anomaEncode |> mkLabel);
    valueRef := Reference.to (count |> mkValue);
    quantity := 1;
    ephemeral;
    nullifierKeyCommitment := toNullifierKeyCommitment identity;
    nonce := mkNonce rand;
    randSeed := mkRandSeed rand
  };

isCounter (resource : Resource) : Bool := Resource.logicRef resource == Reference.to counterLogic;
