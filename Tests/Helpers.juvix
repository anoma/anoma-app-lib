module Tests.Helpers;

import Stdlib.Prelude open;
import Anoma open;
import Test.JuvixUnit open;

import Authorization.Identities open;
import Token.Label open;
import Token.Supply open;
import Token.Resource open;

nf : Nullifier :=
  Nullifier.mk@{
    unNullifier := 123
  };

self : KeyPair := Universal.keyPair;

aliceKudosLabel : Label := exampleLabel@Label{originator := Alice.pubKey};

bobKudosLabel : Label := exampleLabel@Label{originator := Bob.pubKey};

aliceKudos : Kind := Kind.mk 123;
-- getTokenKind (aliceKudosLabel);

bobKudos : Kind := Kind.mk 123;
--getTokenKind (bobKudosLabel);

exampleLabel : Label :=
  mkLabel@{
    name := "Kudos";
    symbol := "KDS";
    decimals := 18;
    supply := Unbound;
    transferable := true;
    originator := KeyPair.pubKey self
  };

exampleToken : Resource :=
  mkToken@{
    quantity := 1;
    tokenLabel := exampleLabel;
    npk := KeyPair.pubKey self
  };

assertGreater {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion := failUnless msg (a1 >= a2);

assertGreaterEqual {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 >= a2);

assertLess {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion := failUnless msg (a1 < a2);

assertLessEqual {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion := failUnless msg (a1 <= a2);

mkExpectMsg {A} {{Show A}} (expected actual : A) (str : String) : String :=
  "\n"
    ++str "Expected "
    ++str Show.show expected
    ++str "\n"
    ++str "to be "
    ++str str
    ++str Show.show actual;

expectTrue (actual : Bool) : Assertion := assertTrue (mkExpectMsg true actual "but got") actual;

expectFalse (actual : Bool) : Assertion := assertFalse (mkExpectMsg false actual "but got") actual;

expectEqual {A} {{Eq A}} {{Show A}} (expected actual : A) : Assertion :=
  assertEqual (mkExpectMsg expected actual "equal to") expected actual;

expectGreater {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertGreater (mkExpectMsg expected actual "greater than") expected actual;

expectGreaterEqual {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertGreaterEqual (mkExpectMsg expected actual "greater than or equal to") expected actual;

expectLess {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertLess (mkExpectMsg expected actual "less than") expected actual;

expectLessEqual {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertLessEqual (mkExpectMsg expected actual "greater than or equal to") expected actual;
