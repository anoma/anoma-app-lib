module KeyValueStorage.Indexing;

import Stdlib.Prelude open;
import Data.Set as Set open using {Set; insert; delete};
import Data.Map as Map open using {Map};
import Anoma open;
import Anoma.Rep open;
import AnomaHelpers open;
import Resource.Traits open;

ledgerKey (kind : Kind) (account : PublicKey) : KeyValue.Key :=
  KeyValue.mkKey (map natToString [Kind.unKind kind; toAtom account]);

ledgerEntries (kind : Kind) (account : PublicKey) : Set Commitment :=
  anomaGet (ledgerKey kind account);

getKinds (rs : List Resource) : Set Kind :=
  for (acc := Set.empty) (r in rs) {insert (anomaKind r) acc};

getAccounts (rs : List Resource) : Set PublicKey :=
  for (acc := Set.empty) (r in rs) {insert (Resource.npk r) acc};

LedgerMapping : Type := Map Kind (Map PublicKey (Set Commitment));

getLedgerMapping (rs : List Resource) : LedgerMapping :=
  let
    kinds : List Kind := Set.toList (getKinds rs);
    accounts : List PublicKey := Set.toList (getAccounts rs);
  in for (outerMap := Map.empty) (kind in kinds)
       {Map.insert
         kind
         (for (innerMap := Map.empty) (account in accounts)
           {Map.insert
             account
             ledgerEntries@{
               kind;
               account
             }
             innerMap})
         outerMap};

-- TODO this must behave differently based on the passed token.
--- Creates a ;List
  (KeyValue.Assignment (Set Commitment)); to be processed by the Anoma node client.
prepareAssignments (tx : Transaction) : List (KeyValue.Assignment (Set Commitment)) :=
  let
    part : ResourcePartition := partitionResources tx;
    nonEphConsumed :=
      filter
        \ {r := not (r |> HasEphemerality.get |> Ephemerality.toBool)}
        (ResourcePartition.consumed part);
    nonEphCreated :=
      filter
        \ {r := not (r |> HasEphemerality.get |> Ephemerality.toBool)}
        (ResourcePartition.created part);

    -- Get the current ledger entries associated with all kinds and accounts involved in this transaction.
    ledger : LedgerMapping := getLedgerMapping (nonEphConsumed ++ nonEphCreated);
    -- Replace the ;Set Commitment; in the mapping with one, where the consumed resource commitments have been removed.
    ledgerWithoutConsumed : LedgerMapping :=
      for (acc := ledger) (r in nonEphConsumed)
        {let
          kind := anomaKind r;
          account := Resource.npk r;
          cm := commitment r;
        in case Map.lookup kind acc of
             | nothing := acc
             | just outer :=
               case Map.lookup account outer of
                 | nothing := acc
                 | just inner :=
                   Map.insert kind (Map.insert account (Set.delete cm inner) outer) acc};
    -- Replace the ;Set Commitment; in the mapping with one, where the created resource commitments have been added.
    ledgerWithoutConsumedWithCreated : LedgerMapping :=
      for (acc := ledgerWithoutConsumed) (r in nonEphCreated)
        {let
          kind := anomaKind r;
          account := Resource.npk r;
          cm := commitment r;
        in case Map.lookup kind acc of
             | nothing := acc
             | just outer :=
               case Map.lookup account outer of
                 | nothing := acc
                 | just inner :=
                   Map.insert kind (Map.insert account (Set.insert cm inner) outer) acc};
  in listFor (outerAcc := []) (outerKey, outerVal in Map.toList ledgerWithoutConsumedWithCreated)
       {listFor (innerAcc := []) (innerKey, innerVal in Map.toList outerVal)
         {outerAcc
           ++ [ KeyValue.assign@{
                key := KeyValue.mkKey (map natToString [Kind.unKind outerKey; toAtom innerKey]);
                value := innerVal
              }
              ]}};
