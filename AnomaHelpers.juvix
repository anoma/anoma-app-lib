module AnomaHelpers;

import Stdlib.Prelude open;
import Stdlib.Trait.Ord.Eq open using {fromOrdToEq};

import Anoma open;
import Anoma.Rep open;
import Test.Delta open;

import Authorization.Identities open;
import Data.Set as Set open using {Set};
import Data.Map as Map open using {Map};

-- TODO Replace by ByteArray / List Byte and delete
type Bytes32 := mkBytes32 {unBytes32 : Nat};

instance
Bytes32-Ord : Ord Bytes32 :=
  mkOrd@{
    cmp : Bytes32 -> Bytes32 -> Ordering
      | (mkBytes32 b1) (mkBytes32 b2) := Ord.cmp b1 b2
  };

instance
Bytes32-Eq : Eq Bytes32 := Stdlib.Trait.Ord.Eq.fromOrdToEq;

instance
Bytes32-Show : Show Bytes32 := mkShow \ {b := natToString (Bytes32.unBytes32 b)};

natToBytes32 : Nat -> Bytes32 := mkBytes32;

type Bytes := mkBytes {unBytes : Nat};

instance
Bytes-Ord : Ord Bytes :=
  mkOrd@{
    cmp : Bytes -> Bytes -> Ordering
      | (mkBytes b1) (mkBytes b2) := Ord.cmp b1 b2
  };

natToBytes : Nat -> Bytes := mkBytes;

instance
PublicKey-Show : Show PublicKey := mkShow \ {k := natToString (toAtom k)};

instance
PrivateKey-Show : Show PrivateKey := mkShow \ {k := natToString (toAtom k)};

isCreated (r : Resource) (tx : Transaction) : Bool :=
  elem (==) r (ResourcePartition.created (partitionResources tx));

isConsumed (r : Resource) (tx : Transaction) : Bool :=
  elem (==) r (ResourcePartition.consumed (partitionResources tx));

type Lifecycle :=
  | Consumed
  | Created
  | Unknown;

lifecycle (r : Resource) (tx : Transaction) : Lifecycle :=
  let
    rs := partitionResources tx;
    consumed := ResourcePartition.consumed rs;
    created := ResourcePartition.created rs;
  in if
    | elem (==) r consumed := Consumed
    | elem (==) r created := Created
    | else := Unknown;

isNullifierPresent (nf : Nullifier) (tx : Transaction) : Bool :=
  elem (==) nf (Transaction.nullifiers tx);

isSubset {A} {{Ord A}} (sub sup : Set A) : Bool := all (x in Set.toList sub) Set.member? x sup;

isSublist {A} {{Ord A}} (sub sup : List A) : Bool :=
  let sup' := Set.fromList sup
  in all (x in sub)
       Set.member? x sup';

commitmentSet (tx : Transaction) : Set Commitment := Set.fromList (Transaction.commitments tx);

nullifierSet (tx : Transaction) : Set Nullifier := Set.fromList (Transaction.nullifiers tx);

lookupExtraData {Key Value : Type} (key : Key) (tx : Transaction) : Maybe Value :=
  let
    keyValueMap : Map Bytes32 Bytes := anomaDecode (Transaction.extra tx);
  in map (Bytes.unBytes >> anomaDecode) (Map.lookup (anomaEncode key |> natToBytes32) keyValueMap);

mkExtraDataEntry {Key Value : Type} : Pair Key Value -> Pair Bytes32 Bytes
  | (key, value) := natToBytes32 (anomaEncode key), natToBytes (anomaEncode value);

computeDelta (consumed : List Resource) (created : List Resource) : Delta :=
  let
    withCreatedDelta : DeltaMap := for (acc := emptyDeltaMap) (r in created) addDelta acc r;
    withConsumedDelta : DeltaMap := for (acc := withCreatedDelta) (r in consumed) subDelta acc r;
  in toDelta withConsumedDelta;

mkTransaction
  (nullifierKey : PrivateKey)
  (consumed : List Resource)
  (created : List Resource)
  (extraData : Map Bytes32 Bytes)
  : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := map commitment created;
    nullifiers := map (r in consumed) nullifier r nullifierKey;
    proofs := consumed ++ created;
    delta :=
      computeDelta@{
        consumed;
        created
      };
    extra := anomaEncode (extraData);
    preference := 0
  };

emptyTx : Transaction :=
  mkTransaction@{
    nullifierKey := Universal.privKey;
    consumed := [];
    created := [];
    extraData := Map.empty
  };

compose (tx1 tx2 : Transaction) : Transaction :=
  Transaction.mk@{
    roots := Set.fromList (Transaction.roots tx1 ++ Transaction.roots tx2) |> Set.toList;
    commitments :=
      Set.fromList (Transaction.commitments tx1 ++ Transaction.commitments tx2) |> Set.toList;
    nullifiers :=
      Set.fromList (Transaction.nullifiers tx1 ++ Transaction.nullifiers tx2) |> Set.toList;
    proofs := Set.fromList (Transaction.proofs tx1 ++ Transaction.proofs tx2) |> Set.toList;
    delta :=
      computeDelta@{
        consumed := map nullifierResource nullifiers;
        created := map commitmentResource commitments
      };
    extra :=
      let
        kvList1 : List (Pair Bytes32 Bytes) := Map.toList (anomaDecode (Transaction.extra tx1));
        kvList2 : List (Pair Bytes32 Bytes) := Map.toList (anomaDecode (Transaction.extra tx2));
      in anomaEncode (Map.fromList (kvList1 ++ kvList2));
    preference := 0
  };

composeAll (txs : List Transaction) : Transaction :=
  for (acc := emptyTx) (tx in txs) {compose acc tx};

rand : Nat := 0;
