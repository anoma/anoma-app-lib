module Transaction.Transfer;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Identity open;
import Anoma.Transaction open;

import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;

import AnomaHelpers open;

--- Transfers a ;Convertable; resource type to a receiver, if the calling ;Identity; is the owner.
--- The function returns a ;StandardError; if the ;Convertable; ;Resource;
--- - is non-transferable
--- - is not owned by the calling ;Identity;.
transfer
  {R}
  {{Convertable R}}
  {{HasTransferability R}}
  {{HasOwner R}}
  {{TransactionConvertable R R}}
  (standardInputs : StandardInputs)
  (toTransfer : R)
  (receiver : ExternalIdentity)
  : Result StandardError Transaction :=
  let
    self : ExternalIdentity := standardInputs |> StandardInputs.identity |> Identity.external;
    owner : ExternalIdentity := HasOwner.get toTransfer;
    transferred : R := HasOwner.set receiver toTransfer;
  in case HasTransferability.get toTransfer of
       | NonTransferable := throw mkNonTransferableError
       | Transferable :=
         case owner == self of
           | false :=
             throw
               mkUnauthorizedError@{
                 expected := self;
                 actual := owner
               }
           | true :=
             ok (TransactionConvertable.toTransaction standardInputs [toTransfer] [transferred]);
