module Transaction.Transfer;

import Stdlib.Prelude open;
import Anoma open;

import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;

--- Transfers a ;Convertable; resource type to a receiver, if the calling ;KeyPair; is the owner.
--- The function returns a ;StandardError; if the ;Convertable; ;Resource;
--- - is non-transferable
--- - is not owned by the calling ;KeyPair;.
transfer
  {R}
  {{Convertable R}}
  {{HasTransferability R}}
  {{HasOwner R}}
  {{TransactionConvertable R R}}
  (self : KeyPair)
  (toTransfer : R)
  (receiver : PublicKey)
  : Result StandardError Transaction :=
  let
    myself : PublicKey := KeyPair.pubKey self;
    nk : PrivateKey := KeyPair.privKey self;
    owner : PublicKey := HasOwner.get toTransfer;
    transferred : R := HasOwner.set receiver toTransfer;
  in case HasTransferability.get toTransfer of
       | NonTransferable := throw mkNonTransferableError
       | Transferable :=
         case owner == myself of
           | false :=
             throw
               mkUnauthorizedError@{
                 expected := myself;
                 actual := owner
               }
           | true := ok (TransactionConvertable.toTransaction nk [toTransfer] [transferred]);
