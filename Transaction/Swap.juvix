module Transaction.Swap;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;
import Intent.Swap.Solution open;

--- Swaps a list of ;Convertable; typed ;Resource;s via an intent of type `I`.
--- The function returns a ;StandardError; if the ;Convertable; typed ;Resource;s are
--- - non-transferable
--- - not owned by the calling ;KeyPair;.
swap
  {R I}
  {{Convertable R}}
  {{Owner R}}
  {{HasTransferability R}}
  {{TransactionConvertable R I}}
  (self : KeyPair)
  (toSwap : List R)
  (intent : I)
  : Result StandardError Transaction :=
  case toSwap of
    | nil :=
      throw
        mkInsufficientElementsError@{
          limit := 1;
          actual := 0
        }
    | _ :: _ :=
      case find ((/=) (Transferability.Transferable)) (map HasTransferability.get toSwap) of
        | just _ := throw mkNonTransferableError
        | nothing :=
          case find ((/=) (KeyPair.pubKey self)) (map Owner.get toSwap) of
            | just notMyself :=
              throw
                mkUnauthorizedError@{
                  expected := KeyPair.pubKey self;
                  actual := notMyself
                }
            | nothing :=
              ok (TransactionConvertable.toTransaction (KeyPair.privKey self) toSwap [intent]);

--- Settles a ;List; of swap ;Transaction;s by composing them with
--- ;Transaction;s obtained from a ;List; of ;Solution;s.
--- The function returns a ;StandardError; if
--- - the calling ;KeyPair; is not designated intent solver.
settle
  (self : KeyPair)
  (txs : List Transaction)
  (solutions : List Solution)
  : Result StandardError Transaction :=
  let
    myself := KeyPair.pubKey self;
    solutionTxs := map (Solution.toTransaction self) (solutions);
  in case find ((/=) myself) (map \ {s := Owner.get (Solution.intent s)} solutions) of
       | just notMyself :=
         throw
           mkUnauthorizedError@{
             expected := myself;
             actual := notMyself
           }
       | nothing := ok (composeAll (txs ++ solutionTxs));
