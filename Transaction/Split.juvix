module Transaction.Split;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Identity open;
import Anoma.Transaction open;

import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;

--- Splits a ;Convertable; typed ;Resource;.
--- The function returns a ;StandardError; if the ;Convertable; ;Resource;
--- - is ;Transferability.NonTransferable;
--- - is not owned by the calling ;Identity;
--- - or quantities do not balance.
split
  {R}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasQuantity R}}
  {{HasTransferability R}}
  {{TransactionConvertable R R}}
  (self : Identity)
  (toSplit : R)
  (quantitiesAndReceivers : List (Pair Quantity ExternalIdentity))
  : Result StandardError Transaction :=
  let
    myself : ExternalIdentity := Identity.external self;
    owner : ExternalIdentity := HasOwner.get toSplit;
    toSplitResource := Convertable.toResource toSplit;
    sum : Quantity := listFor (acc := 0) (quantity, _ in quantitiesAndReceivers) {quantity + acc};

    balance := HasQuantity.get toSplit;
    created : List R :=
      map (quantity, receiver in quantitiesAndReceivers)
        {toSplit |> HasOwner.set receiver |> HasQuantity.set quantity};
  in case HasTransferability.get toSplit of
       | NonTransferable := throw mkNonTransferableError
       | Transferable :=
         case owner == myself of
           | false :=
             throw
               mkUnauthorizedError@{
                 expected := myself;
                 actual := owner
               }
           | true :=
             case balance == sum of
               | false :=
                 throw
                   mkInsufficientHasQuantityError@{
                     limit := balance;
                     actual := sum
                   }
               | true := ok (TransactionConvertable.toTransaction self [toSplit] created);
