module Transaction.Send;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open using {compare};
import Anoma open;

import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;
import Transaction.Transfer open;
import Transaction.Split open;

--- Sends a ;HasQuantity; of token ;Resource; to a receiver, if the calling ;KeyPair; is the owner.
--- If the quantity is lower than of the quantity of the consumed ;Resource;, the function creates
--- a second ;Resource; with the difference being owned by the caller.
--- The function returns a ;StandardError; if
--- - the quantity exceeds the quantity of the resource
--- - the ;transfer; or ;split; functions return a ;StandardError;.
send
  {R}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasQuantity R}}
  {{HasTransferability R}}
  {{TransactionConvertable R R}}
  (self : KeyPair)
  (toSend : R)
  (quantity : Nat)
  (receiver : PublicKey)
  : Result StandardError Transaction :=
  let
    myself : PublicKey := KeyPair.pubKey self;
    balance : Nat := HasQuantity.get toSend;
  in case compare balance quantity of
       | LT :=
         throw
           mkInsufficientHasQuantityError@{
             limit := balance;
             actual := quantity
           }
       | EQ := transfer self toSend receiver
       | GT :=
         let
           difference : Nat := toNat (intSubNat balance quantity);
         in split self toSend [quantity, receiver; difference, myself];
