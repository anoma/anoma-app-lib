module Transaction.Traits;

import Stdlib.Prelude open;
import Anoma open;

import Resource.Traits open;
import Authorization.Message open;

trait
type TransactionConvertable R1 R2 :=
  mkTransactionConvertable {toTransaction : PrivateKey -> List R1 -> List R2 -> Transaction};

instance
Resource-TransactionConvertable : TransactionConvertable Resource Resource :=
  mkTransactionConvertable@{
    toTransaction
      (nk : PrivateKey) (consumed : List Resource) (created : List Resource) : Transaction :=
      let
        extra : Nat :=
          anomaEncode
            mkResourceRelationshipExtraData@{
              nullifierKey := nk;
              origins := consumed;
              mustBeConsumed := [];
              mustBeCreated := created
            };
      in Transaction.mk@{
        roots := [];
        commitments := map commitment created;
        nullifiers := map (r in consumed) nullifier r nk;
        proofs := consumed ++ created;
        delta := [];
        extra;
        preference := 0
      }
  };

module FromConvertable;
  transactionConvertable
    {R1 R2} {{Convertable R1}} {{Convertable R2}} : TransactionConvertable R1 R2 :=
    mkTransactionConvertable@{
      toTransaction (nk : PrivateKey) (consumed : List R1) (created : List R2) : Transaction :=
        let
          consumedRs := map Convertable.toResource consumed;
          createdRs := map Convertable.toResource created;
        in TransactionConvertable.toTransaction nk consumedRs createdRs
    };
end;
