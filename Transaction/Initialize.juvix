module Transaction.Initialize;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Transaction open;
import Anoma.Identity open;

import AnomaHelpers open;
import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;
import Utils.Dummy.Transaction as Dummy open using {finalize};

--- Initializes a ;Convertable; typed ;Resource;.
--- For tokens with fixed supply, a dummy is required.
--- The function returns a ;StandardError; if
--- - a dummy is provided for tokens with ;Unbound; supply.
--- - no dummy is provided for tokens with ;Fixed; supply.
--- - the supply type is ;Capped; which is not supported.
initialize
  {R}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasSupply R}}
  {{HasEphemerality R}}
  {{TransactionConvertable R R}}
  (self : Identity)
  (toInitialize : R)
  (maybeDummy : Maybe Resource)
  : Result StandardError Transaction :=
  let
    -- TODO Refactor
    nk : NullifierKey :=
      self |> Identity.internal |> InternalIdentity.unInternalIdentity |> mkNullifierKey;
    ephResource : R :=
      HasEphemerality.set
        Ephemerality.Ephemeral
        (HasOwner.set (Identity.external self) toInitialize);
    tx : Transaction := TransactionConvertable.toTransaction self [ephResource] [toInitialize];
  in case HasSupply.get toInitialize of
       | Unbound :=
         case maybeDummy of {
           | nothing := ok tx
           | just dummy :=
             throw
               mkDefaultError@{
                 msg := "A dummy resource is only required for resources with fixed supply."
               }
         }
       | Capped :=
         throw
           mkDefaultError@{
             msg := "Tokens with capped supply are not supported yet."
           }
       | Fixed nf :=
         case maybeDummy of
           | nothing :=
             throw
               mkDefaultError@{
                 msg :=
                   "A resource to consume must be provided whose nullifier is referenced in the fixed supply type."
               }
           | just dummy :=
             case nullifier dummy nk == nf of
               | false :=
                 throw
                   mkDefaultError@{
                     msg :=
                       "The provided resource's nullifier does not match the one referenced in the fixed supply type."
                   }
               | true :=
                 ok
                   composeTransactions@{
                     tx1 := tx;
                     tx2 :=
                       Dummy.finalize@{
                         self;
                         dummy
                       }
                   };
