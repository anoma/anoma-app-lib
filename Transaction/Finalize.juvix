module Transaction.Finalize;

import Stdlib.Prelude open;
import Anoma.Resource open;
import Anoma.Transaction open;
import Anoma.Identity open;
import AnomaHelpers open;

import Authorization.Identities open;
import Resource.Error open;
import Resource.Traits open;
import Transaction.Traits open;

--- Finalizes a ;Convertable; typed ;Resource;, if the calling ;Identity; is the owner.
--- This requires an ephemeral resource to be created.
--- The function returns a ;StandardError; if
--- - the calling ;Identity; is not the owner
--- - the supply type is ;Fixed; in which case finalization is not supported.
--- - the supply type is ;Capped; which is not supported.
finalize
  {R}
  {{Convertable R}}
  {{HasOwner R}}
  {{HasSupply R}}
  {{HasEphemerality R}}
  {{TransactionConvertable R R}}
  (self : Identity)
  (toFinalize : R)
  : Result StandardError Transaction :=
  let
    owner : ExternalIdentity := HasOwner.get toFinalize;
    ephResource := HasEphemerality.set Ephemerality.Ephemeral (HasOwner.set Zero.externalIdentity toFinalize);
  in if
    | owner /= Identity.external self :=
      throw
        mkUnauthorizedError@{
          expected := Identity.external self;
          actual := owner
        }
    | else :=
      case HasSupply.get toFinalize of
        | Unbound := ok (TransactionConvertable.toTransaction self [toFinalize] [ephResource])
        | Capped :=
          throw
            mkDefaultError@{
              msg := "Tokens with capped supply are not supported yet."
            }
        | Fixed _ :=
          throw
            mkDefaultError@{
              msg := "Tokens with fixed supply cannot be finalized."
            };
