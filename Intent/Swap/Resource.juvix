module Intent.Swap.Resource;

import Stdlib.Prelude open;
import Anoma open;
import AnomaHelpers open;

import Resource.Traits open;
import Intent.Asset open;
import Intent.Swap.Logic open;

module SwapIntent;
  type SwapIntent := mk {resource : Resource};

  create (want : QuantifiedAssets) (receiver solver : PublicKey) : SwapIntent :=
    mk
      Resource.mk@{
        logic := swapIntentLogic want receiver;
        label := anomaEncode "SwapIntent";
        quantity := 1;
        data := 0;
        eph := true;
        npk := solver;
        nonce := rand;
        rseed := 0
      };

  open SwapIntent public;
end;

open SwapIntent using {SwapIntent} public;

instance
SwapIntent-Convertable : Convertable SwapIntent :=
  mkConvertable@{
    toResource (t : SwapIntent) : Resource := SwapIntent.resource t;
    fromResource (r : Resource) : SwapIntent := SwapIntent.mk r
  };

-- TODO harmonize names
instance
SwapIntent-Quantity : Quantity SwapIntent := FromConvertable.quantity {SwapIntent};

instance
SwapIntent-Owner : Owner SwapIntent := FromConvertable.owner {SwapIntent};

instance
SwapIntent-HasEphemerality : HasEphemerality SwapIntent :=
  FromConvertable.hasEphemerality {SwapIntent};

instance
SwapIntent-HasKind : HasKind SwapIntent := FromConvertable.hasKind {SwapIntent};
