module Resource.Traits;

import Stdlib.Prelude open;
import Anoma open;
import Anoma.Rep open;
import AnomaHelpers open;

import Resource.Traits.Convertable open public;
import Resource.Traits.Ephemerality open public;
import Resource.Traits.Kind open public;
import Resource.Traits.Label open public;
import Resource.Traits.Logic open public;
import Resource.Traits.Originator open public;
import Resource.Traits.Owner open public;
import Resource.Traits.Quantity open public;
import Resource.Traits.Supply open public;
import Resource.Traits.Transferability open public;

module FromConvertable;
  hasLogic {R} {{Convertable R}} : HasLogic R :=
    mkHasLogic@{
      get (typed : R) : Resource -> Transaction -> Bool :=
        HasLogic.get (Convertable.toResource typed);

      set (logic : Resource -> Transaction -> Bool) (typed : R) : R :=
        HasLogic.set logic (Convertable.toResource typed) |> Convertable.fromResource
    };

  hasKind {R} {{Convertable R}} : HasKind R :=
    mkHasKind@{
      get (typed : R) : Kind := HasKind.get (Convertable.toResource typed);

      set (kind : Kind) (typed : R) : R :=
        HasKind.set kind (Convertable.toResource typed) |> Convertable.fromResource
    };

  -- TODO name
  quantity {R} {{Convertable R}} : Quantity R :=
    mkHasQuantity@{
      get (typed : R) : Nat := Quantity.get (Convertable.toResource typed);

      set (quantity : Nat) (typed : R) : R :=
        Quantity.set quantity (Convertable.toResource typed) |> Convertable.fromResource
    };

  hasEphemerality {R} {{Convertable R}} : HasEphemerality R :=
    mkHasEphemerality@{
      get (typed : R) : Ephemerality := HasEphemerality.get (Convertable.toResource typed);

      set (ephemerality : Ephemerality) (typed : R) : R :=
        HasEphemerality.set ephemerality (Convertable.toResource typed) |> Convertable.fromResource
    };

  owner {R} {{Convertable R}} : Owner R :=
    mkOwner@{
      get (typed : R) : PublicKey := Owner.get (Convertable.toResource typed);

      set (owner : PublicKey) (typed : R) : R :=
        Owner.set owner (Convertable.toResource typed) |> Convertable.fromResource
    };

end;
