module Resource.Traits.Ephemerality;

import Stdlib.Prelude open;
import Anoma.Resource open;

module Ephemerality;
  type Ephemerality :=
    | NonEphemeral
    | Ephemeral;

  fromBool (isEphemeral : Bool) : Ephemerality :=
    case isEphemeral of
      | false := NonEphemeral
      | true := Ephemeral;

  toBool (ephemerality : Ephemerality) : Bool :=
    case ephemerality of
      | NonEphemeral := false
      | Ephemeral := true;
end;

open Ephemerality using {Ephemerality} public;

instance
Ephemerality-Show : Show Ephemerality :=
  mkShow
    \ {eph :=
      case eph of
        | Ephemeral := "Ephemeral"
        | NonEphemeral := "NonEphemeral"};

trait
type HasEphemerality ResourceT :=
  mkHasEphemerality {
    get : ResourceT -> Ephemerality;
    set : Ephemerality -> ResourceT -> ResourceT
  };

instance
Resource-HasEphemerality : HasEphemerality Resource :=
  mkHasEphemerality@{
    get (resource : Resource) : Ephemerality :=
      resource |> Resource.ephemeral |> Ephemerality.fromBool;
    set (ephemerality : Ephemerality) (resource : Resource) : Resource :=
      resource@Resource{ephemeral := Ephemerality.toBool ephemerality}
  };
