module Resource.Traits.Kind;

import Stdlib.Prelude open;
import Anoma open;

module Kind;
  toPair (kind : Kind) : Pair (Resource -> Transaction -> Bool) Nat :=
    anomaDecode (Kind.unKind kind);

  toLogic (kind : Kind) : Resource -> Transaction -> Bool := fst (toPair kind);

  toLabel (kind : Kind) : Nat := snd (toPair kind);

  fromLabelAndLogic (logic : Resource -> Transaction -> Bool) (label : Nat) : Kind :=
    anomaEncode (logic, label) |> Kind.mk;

  open Kind public;
end;

instance
Kind-Show : Show Kind := mkShow \ {k := natToString (Kind.unKind k)};

trait
type HasKind ResourceT :=
  mkHasKind {
    get : ResourceT -> Kind;
    set : Kind -> ResourceT -> ResourceT
  };

instance
Resource-HasKind : HasKind Resource :=
  mkHasKind@{
    get (resource : Resource) : Kind := anomaKind resource;
    set (kind : Kind) (resource : Resource) : Resource :=
      resource@Resource{
        logic := Kind.toLogic kind;
        label := Kind.toLabel kind
      }
  };
